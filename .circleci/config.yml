## Pre-declare environmental variables
environment-template-common: &environment-template-common
  DEBIAN_FRONTEND: "noninteractive"
  DEBIAN_PRIORITY: "critical"
  DEBCONF_NOWARNINGS: "yes"
  DEBFULLNAME: "JaiaRobotics CircleCI"
  DEBEMAIL: "toby@gobysoft.org"
  QUILT_PATCHES: debian/patches
  QUILT_REFRESH_ARGS: "-p ab --no-timestamps --no-index --strip-trailing-whitespace"
  CC: /usr/bin/clang
  CXX: /usr/bin/clang++
  
environment-template-amd64: &environment-template-amd64
  TARGET_ARCH: "amd64"
  DEB_BUILD_OPTIONS: "parallel=4"
  # one job only must do the source build for each distro
  DO_SOURCE_BUILD: "true"

environment-template-arm64: &environment-template-arm64
  TARGET_ARCH: "arm64"
  DEB_BUILD_OPTIONS: "parallel=4 nocheck"
  
environment-template-focal: &environment-template-focal
  DISTRO_RELEASE_CODENAME: "focal"
  DISTRO_RELEASE_VERSION: "ubuntu20.04"

  
## Pre-declare Docker containers

docker-base-focal: &docker-base-focal
  - image: gobysoft/jaiabot-ubuntu-amd64:20.04.1
docker-arm64-focal: &docker-arm64-focal
  - image: gobysoft/jaiabot-ubuntu-arm64:20.04.1
docker-base-light: &docker-base-light
  - image: gobysoft/ubuntu-build-base:20.04.1


    
## Pre-declare job templates
job-template-amd64: &job-template-amd64
  working_directory: /root/jaiabot
  steps:
    - checkout
    - run: &run-add-gobysoft-packages-key
        name: Install packages.gobysoft.org key
        command: |
          apt-key adv --recv-key --keyserver keyserver.ubuntu.com 19478082E2F8D3FE
    - run: &run-add-jaia-packages-key
        name: Install packages.jaia.tech key
        command: |
          apt-key adv --recv-key --keyserver keyserver.ubuntu.com 954A004CD5D8CF32
    - run: &run-set-deb-rep-and-version
        name: Set environmental variables for which packages.jaia.tech repo to use
        command: |
          repo=$(/root/jaiabot/.circleci/deb_repo.sh "$CIRCLE_BRANCH" "$CIRCLE_TAG" "repo")
          version=$(/root/jaiabot/.circleci/deb_repo.sh "$CIRCLE_BRANCH" "$CIRCLE_TAG" "version")
          # export these for later use
          echo "export JAIABOT_APT_REPO=${repo}" >> $BASH_ENV
          echo "export JAIABOT_APT_VERSION=${version}" >> $BASH_ENV
    - run: &run-add-jaia-packages-list
        name: Add correct packages.jaia.tech sources.list
        command: |
          echo "JAIABOT_APT_REPO=${JAIABOT_APT_REPO}"
          echo "deb http://packages.jaia.tech/ubuntu/${JAIABOT_APT_REPO}/${JAIABOT_APT_VERSION}/ ${DISTRO_RELEASE_CODENAME}/" >> /etc/apt/sources.list.d/jaiabot_${JAIABOT_APT_REPO}_${JAIABOT_APT_VERSION}.list
    - run: &run-update-apt
        name: Update apt packages
        command: |
          apt-get update &&
          apt-get dist-upgrade -y 
          [[ "${TARGET_ARCH}" == "amd64" ]] && apt-get install goby3-clang-tool || true
    - run: &run-build
        name: Build
        command: mkdir -p build && cd build && cmake -DCMAKE_BUILD_TYPE=Debug .. && cmake --build . -- -j2
    - run: &run-tests
        name: Run tests
        command: cd build && ctest --output-on-failure

job-template-deb-amd64: &job-template-deb-amd64
  <<: *job-template-amd64
  resource_class: large
  steps:
    - run: *run-add-gobysoft-packages-key
    - run: *run-add-jaia-packages-key
    - run: *run-set-deb-rep-and-version
    - run: *run-add-jaia-packages-list
    - run: *run-update-apt
    - run: &run-import-gpg
        name: Import GPG key
        command: echo -e "$GPG_KEY" | gpg --import
    - attach-workspace: &attach-src-workspace
        at: /root/src
    - run: &run-extract-src
        name: Extract the original source tarball
        command: |
          cp /root/src/*.orig.tar.xz ${CIRCLE_WORKING_DIRECTORY}/.. &&
          tar xfJ ../*.orig.tar.xz --strip-components=1
    - run: &run-update-deb
        name: Update the debian source repo and pull the branch with the same name as the project branch (if it exists)
        command: |
          cd /root && 
          git clone https://github.com/jaiarobotics/jaiabot-debian &&
          cd /root/jaiabot-debian &&
          git checkout origin/${CIRCLE_BRANCH} ||
          echo "No branch in debian called ${CIRCLE_BRANCH}, using $(git rev-parse --abbrev-ref HEAD)"
    - run: &run-nest-deb
        name: Nest debian source into project source and comment out clang as build-depends (causes problems for cross-builds)
        command: |
          mv /root/jaiabot-debian ${CIRCLE_WORKING_DIRECTORY}/debian &&
          cp /root/src/changelog ${CIRCLE_WORKING_DIRECTORY}/debian &&
          sed -i "s/DISTRORELEASEVERSION/${DISTRO_RELEASE_VERSION}/;s/DISTRORELEASECODENAME/${DISTRO_RELEASE_CODENAME}/" ${CIRCLE_WORKING_DIRECTORY}/debian/changelog &&
          sed -i 's/^\( *\)clang/#\1clang/' ${CIRCLE_WORKING_DIRECTORY}/debian/control &&
          sed -i 's/^\( *\)lld/#\1lld/' ${CIRCLE_WORKING_DIRECTORY}/debian/control
    - run: &run-patch-version
        name: Patch the version patch number automatically in CMakeLists.txt
        command: |
          mkdir -p ${CIRCLE_WORKING_DIRECTORY}/debian/patches
          export NEWVERSION="$(echo ../*.orig.tar.xz | sed 's/.*_\(.*\)\.orig\.tar\.xz/\1/')"
          quilt new 01-patch-version
          quilt add CMakeLists.txt
          export NEWVERSION_MAJOR=$(echo $NEWVERSION | cut -d . -f 1)
          export NEWVERSION_MINOR=$(echo $NEWVERSION | cut -d . -f 2)
          export NEWVERSION_PATCH=$(echo $NEWVERSION | cut -d . -f 3)
          sed -i "s/^set(PROJECT_VERSION_MAJOR *\".*\"/set(PROJECT_VERSION_MAJOR \"${NEWVERSION_MAJOR}\"/" CMakeLists.txt
          sed -i "s/^set(PROJECT_VERSION_MINOR *\".*\"/set(PROJECT_VERSION_MINOR \"${NEWVERSION_MINOR}\"/" CMakeLists.txt
          sed -i "s/^set(PROJECT_VERSION_PATCH *\".*\"/set(PROJECT_VERSION_PATCH \"${NEWVERSION_PATCH}\"/" CMakeLists.txt
          quilt refresh                  
    - run: &run-build-pkg
        name: Build the Debian package 
        command: |
          export DPKG_BUILDPACKAGE_BUILD_TYPE="-B"
          # default is to do source and binary build
          [[ "${DO_SOURCE_BUILD}" == "true" ]] && DPKG_BUILDPACKAGE_BUILD_TYPE=""        
          CONFIG_SITE=/etc/dpkg-cross/cross-config.${TARGET_ARCH} && dpkg-buildpackage -k954A004CD5D8CF32 -a${TARGET_ARCH} ${DPKG_BUILDPACKAGE_BUILD_TYPE}
    - run: &run-store-next-build
        name: Store deb files for next build
        command: |
          mkdir -p /root/deb &&
          find .. -maxdepth 1 -type f -exec cp {}  /root/deb \; &&
          rm -f /root/deb/*-build-deps*.deb
    - run: &run-store-for-artifacts
        name: Store deb files for storing artifacts
        command: mkdir -p /tmp/deb && cp /root/deb/* /tmp/deb
    - store_artifacts: &store
        path: /tmp/deb
    - run: &remove-orig-source
        name: Remove original source file to avoid conflicts in merging
        command: |        
          rm -f /root/deb/*.orig.tar.xz || true
    - persist_to_workspace: &persist-debs
        root: /root/deb
        paths:
          - '*.dsc'
          - '*.tar.xz'
          - '*.deb'
          - '*.ddeb'
          - '*.changes'
          - '*.buildinfo'
  
job-template-deb-cross: &job-template-deb-cross
  <<: *job-template-deb-amd64

job-template-upload: &job-template-upload
  <<: *job-template-amd64
  docker: *docker-base-light
  
# which branches to run the Debian build and upload on
filter-template-master-only: &filter-template-master-only
  filters:
    tags:
      only: /.*/
    branches:
      only:
        - "1.y"
        - "fix-deb-versioning-circleci"

filter-template-non-master: &filter-template-non-master
  filters:
    branches:
      ignore:
        - "1.y"
        - "fix-deb-versioning-circleci"

        
## Begin actual config
version: 2
workflows:
  version: 2
  commit:
    jobs:
      - amd64-focal-build:
          <<: *filter-template-non-master
      
      - get-orig-source:
          <<: *filter-template-master-only

      - amd64-focal-deb-build:
          <<: *filter-template-master-only
          requires:
            - get-orig-source
      - arm64-focal-deb-build:
          <<: *filter-template-master-only
          requires:
            - get-orig-source
            
      # always do the upload if we did the deb builds
      - upload:
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/
          requires:
            - amd64-focal-deb-build
            - arm64-focal-deb-build

      # bundle after each package upload
      - bundle:
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/
          requires:
            - upload          

jobs:

  get-orig-source:
    <<: *job-template-deb-amd64
    docker: *docker-base-light
    resource_class: small
    environment:
      <<: *environment-template-common
      <<: *environment-template-focal
      <<: *environment-template-amd64
    steps:
      - checkout
      - run:
          name: Get original source tarball
          command: |
            # use long format for continuous builds so they always rank after release builds
            # use tag directly for release/beta builds
            [ -z "${CIRCLE_TAG}" ] && export RAWVERSION="$(git describe --tags HEAD --long)" || export RAWVERSION="${CIRCLE_TAG}"
            export NEWVERSION="$(echo ${RAWVERSION} | sed 's/_/~/' | sed 's/-/+/g')"
            git config tar.tar.xz.command "xz -c" &&
            mkdir -p /root/src &&
            git archive --prefix=jaiabot-${NEWVERSION}/ -o /root/src/jaiabot_${NEWVERSION}.orig.tar.xz HEAD;
      - run:
          name: Add changelog entry 
          command: |
            cd /root &&
            rm -rf debian &&
            git clone https://github.com/jaiarobotics/jaiabot-debian debian &&
            export NEWVERSION="$(echo /root/src/*.orig.tar.xz | sed 's/.*_\(.*\)\.orig\.tar\.xz/\1/')"
            COMMENT="Autobuild for version ${NEWVERSION}" &&
            dch --newversion=${NEWVERSION}-0~DISTRORELEASEVERSION.1 -D DISTRORELEASECODENAME "${COMMENT}" &&
            cp debian/changelog /root/src
      - store_artifacts:
          path: /root/src
      - persist_to_workspace:
          root: /root/src
          paths:
            - '*.tar.xz'
            - 'changelog'

  amd64-focal-build:
    <<: *job-template-amd64
    docker: *docker-base-focal
    environment:
      <<: *environment-template-common
      <<: *environment-template-focal
      
  amd64-focal-deb-build:
    <<: *job-template-deb-amd64
    docker: *docker-base-focal
    environment:
      <<: *environment-template-common
      <<: *environment-template-focal
      <<: *environment-template-amd64
  arm64-focal-deb-build: 
    <<: *job-template-deb-cross
    docker: *docker-arm64-focal
    environment:
      <<: *environment-template-common
      <<: *environment-template-focal
      <<: *environment-template-arm64
  upload:
    <<: *job-template-upload
    environment:
      <<: *environment-template-common
      <<: *environment-template-focal
      <<: *environment-template-amd64
    resource_class: small
    steps: &steps-upload
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "5a:bc:88:89:21:a2:a0:cd:68:07:b5:26:f0:64:28:e9"
      - run: *run-import-gpg
      - attach-workspace:
          at: /root/deb
      - attach-workspace: *attach-src-workspace
      - run:
          name: Move original source into output directory
          command: mv /root/src/* /root/deb
      - run: *run-set-deb-rep-and-version
      - run:      
          name: Upload packages to packages.jaia.tech
          command: |
            echo 'trusted-key 954A004CD5D8CF32' >> ~/.gnupg/gpg.conf
            echo '|1|OX0vdRrGPWjPOTrl5R/joY37TX0=|teBg0IDnMu36QiR2UL4usur+XyY= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBIz46MTlT0H1Z9P4Msh32nhdbQ9D/CEfnIavB+pRtHZZ3oKrS6ZWKxTOUHTKgw+KKUMSKzdW7XtPaBKb0Qndahw=' >> ~/.ssh/known_hosts
            for change_file in /root/deb/*.changes;
            do dput -c ${CIRCLE_WORKING_DIRECTORY}/.circleci/dput.cf jaiabot-${JAIABOT_APT_REPO}-${JAIABOT_APT_VERSION} $change_file;
            done
  bundle:
    working_directory: /tmp/bundle/jaiabot
    machine:
      image: ubuntu-2004:current
    resource_class: arm.medium
    environment:
      <<: *environment-template-focal
    steps:
      - checkout
      - run: *run-set-deb-rep-and-version
      - run:
          name: Bundle package (to jaiabot/build/bundle/jaiabot_bundle.tar)
          command: |
            cd /tmp/bundle/jaiabot
            sudo docker run --rm -v `pwd`:/jaiabot -w /jaiabot ubuntu:${DISTRO_RELEASE_CODENAME} ./scripts/bundle_update.sh ${DISTRO_RELEASE_CODENAME} ${JAIABOT_APT_REPO} ${JAIABOT_APT_VERSION}
            cd build/bundle
            export NEWVERSION="$(echo jaiabot-embedded_*.deb | sed 's/.*_\(.*\)\-.*/\1/')"
            sudo mkdir -p /tmp/bundle/result
            sudo cp ../jaiabot_updates.tar /tmp/bundle/result/jaiabot_updates_${NEWVERSION}.tar
            sudo cp ../jaiabot_updates.iso /tmp/bundle/result/jaiabot_updates_${NEWVERSION}.iso

      - store_artifacts:
          path: /tmp/bundle/result

