## Pre-declare environmental variables
environment-template-common: &environment-template-common
  DEBIAN_FRONTEND: "noninteractive"
  DEBIAN_PRIORITY: "critical"
  DEBCONF_NOWARNINGS: "yes"
  DEBFULLNAME: "JaiaRobotics CircleCI"
  DEBEMAIL: "toby@gobysoft.org"
  QUILT_PATCHES: debian/patches
  QUILT_REFRESH_ARGS: "-p ab --no-timestamps --no-index --strip-trailing-whitespace"
  CC: /usr/bin/clang
  CXX: /usr/bin/clang++
  
environment-template-amd64: &environment-template-amd64
  TARGET_ARCH: "amd64"
  DEB_BUILD_OPTIONS: "parallel=2"
  # one job only must do the source build for each distro
  DO_SOURCE_BUILD: "true"

environment-template-arm64: &environment-template-arm64
  TARGET_ARCH: "arm64"
  DEB_BUILD_OPTIONS: "parallel=2 nocheck"
  
environment-template-bionic: &environment-template-bionic
  DISTRO_RELEASE_CODENAME: "bionic"
  DISTRO_RELEASE_VERSION: "ubuntu18.04"

environment-template-focal: &environment-template-focal
  DISTRO_RELEASE_CODENAME: "focal"
  DISTRO_RELEASE_VERSION: "ubuntu20.04"

  
## Pre-declare Docker containers
docker-base-bionic: &docker-base-bionic
  - image: gobysoft/goby3-ubuntu-build-base:18.04.1
docker-arm64-bionic: &docker-arm64-bionic
  - image: gobysoft/goby3-ubuntu-build-arm64:18.04.1

docker-base-focal: &docker-base-focal
  - image: gobysoft/goby3-ubuntu-build-base:20.04.1
docker-arm64-focal: &docker-arm64-focal
  - image: gobysoft/goby3-ubuntu-build-arm64:20.04.1

    
## Pre-declare job templates
job-template-amd64: &job-template-amd64
  working_directory: /root/jaiabot-hydro
  steps:
    - checkout
    - run: &run-add-packages-key
        name: Install packages.gobysoft.org key
        command: |
          apt-key adv --recv-key --keyserver keyserver.ubuntu.com 19478082E2F8D3FE
    - run: &run-add-continuous-packages
        name: Add continuous build package sources.list (if not a tagged release)
        command: |
          [ -z "${CIRCLE_TAG}" ] &&
          echo "deb http://packages.gobysoft.org/ubuntu/continuous/ ${DISTRO_RELEASE_CODENAME}/" >> /etc/apt/sources.list.d/gobysoft_continuous.list ||
          true
    - run: &run-update-apt
        name: Update apt packages
        command: |
          apt-get update &&
          apt-get dist-upgrade -y &&
          apt-get install libgoby3-dev:${TARGET_ARCH} libgoby3-moos-dev:${TARGET_ARCH} libgoby3-moos:${TARGET_ARCH} libgoby3-gui-dev:${TARGET_ARCH} goby3-interfaces:${TARGET_ARCH} -y --no-install-recommends
          [[ "${TARGET_ARCH}" == "amd64" ]] && apt-get install goby3-clang-tool || true
    - run: &run-build
        name: Build
        command: mkdir -p build && cd build && cmake -DCMAKE_BUILD_TYPE=Debug .. && cmake --build . -- -j2
    - run: &run-tests
        name: Run tests
        command: cd build && ctest --output-on-failure

job-template-deb-amd64: &job-template-deb-amd64
  <<: *job-template-amd64
  steps:
    - run: *run-add-packages-key
    - run: *run-add-continuous-packages
    - run: *run-update-apt
    - run: &run-import-gpg
        name: Import GPG key
        command: echo -e "$GPG_KEY" | gpg --import
    - attach-workspace: &attach-src-workspace
        at: /root/src
    - run: &run-extract-src
        name: Extract the original source tarball
        command: |
          cp /root/src/*.orig.tar.xz ${CIRCLE_WORKING_DIRECTORY}/.. &&
          tar xfJ ../*.orig.tar.xz --strip-components=1
    - run: &run-update-deb
        name: Update the debian source repo and pull the branch with the same name as the project branch (if it exists)
        command: |
          cd /root && 
          git clone https://github.com/jaiarobotics/jaiabot-hydro-debian &&
          cd /root/jaiabot-hydro-debian &&
          git checkout origin/${CIRCLE_BRANCH} ||
          echo "No branch in debian called ${CIRCLE_BRANCH}, using $(git rev-parse --abbrev-ref HEAD)"
    - run: &run-nest-deb
        name: Nest debian source into project source and comment out clang as build-depends (causes problems for cross-builds)
        command: |
          mv /root/jaiabot-hydro-debian ${CIRCLE_WORKING_DIRECTORY}/debian &&
          cp /root/src/changelog ${CIRCLE_WORKING_DIRECTORY}/debian &&
          sed -i "s/DISTRORELEASEVERSION/${DISTRO_RELEASE_VERSION}/;s/DISTRORELEASECODENAME/${DISTRO_RELEASE_CODENAME}/" ${CIRCLE_WORKING_DIRECTORY}/debian/changelog &&
          sed -i 's/^\( *\)clang/#\1clang/' ${CIRCLE_WORKING_DIRECTORY}/debian/control &&
          sed -i 's/^\( *\)lld/#\1lld/' ${CIRCLE_WORKING_DIRECTORY}/debian/control
    - run: &run-patch-version
        name: Patch the version patch number automatically in CMakeLists.txt
        command: |
          mkdir -p ${CIRCLE_WORKING_DIRECTORY}/debian/patches
          export NEWVERSION="$(echo ../*.orig.tar.xz | sed 's/.*_\(.*\)\.orig\.tar\.xz/\1/')"
          quilt new 01-patch-version
          quilt add CMakeLists.txt
          export NEWVERSION_PATCH=$(echo $NEWVERSION | cut -d . -f 3)
          sed -i "s/^set(PROJECT_VERSION_PATCH *\".*\"/set(PROJECT_VERSION_PATCH \"${NEWVERSION_PATCH}\"/" CMakeLists.txt
          quilt refresh                  
    - run: &run-build-pkg
        name: Build the Debian package 
        command: |
          export DPKG_BUILDPACKAGE_BUILD_TYPE="-B"
          # default is to do source and binary build
          [[ "${DO_SOURCE_BUILD}" == "true" ]] && DPKG_BUILDPACKAGE_BUILD_TYPE=""        
          CONFIG_SITE=/etc/dpkg-cross/cross-config.${TARGET_ARCH} && dpkg-buildpackage -k19478082E2F8D3FE -a${TARGET_ARCH} ${DPKG_BUILDPACKAGE_BUILD_TYPE}
    - run: &run-store-next-build
        name: Store deb files for next build
        command: |
          mkdir -p /root/deb &&
          find .. -maxdepth 1 -type f -exec cp {}  /root/deb \; &&
          rm -f /root/deb/*-build-deps*.deb
    - run: &run-store-for-artifacts
        name: Store deb files for storing artifacts
        command: mkdir -p /tmp/deb && cp /root/deb/* /tmp/deb
    - store_artifacts: &store
        path: /tmp/deb
    - run: &remove-orig-source
        name: Remove original source file to avoid conflicts in merging
        command: |        
          rm -f /root/deb/*.orig.tar.xz || true
    - persist_to_workspace: &persist-debs
        root: /root/deb
        paths:
          - '*.dsc'
          - '*.tar.xz'
          - '*.deb'
          - '*.ddeb'
          - '*.changes'
          - '*.buildinfo'
  
job-template-deb-cross: &job-template-deb-cross
  <<: *job-template-deb-amd64

# Base upload off Bionic build
job-template-upload: &job-template-upload
  <<: *job-template-amd64
  docker: *docker-base-bionic

  
# which branches to run the Debian build and upload on
filter-template-master-only: &filter-template-master-only
  filters:
    tags:
      only: /.*/
    branches:
      only:
        - "1.y"

filter-template-non-master: &filter-template-non-master
  filters:
    branches:
      ignore:
        - "1.y"
        
## Begin actual config
version: 2
workflows:
  version: 2
  commit:
    jobs:
      - amd64-bionic-build:
          <<: *filter-template-non-master
      - amd64-focal-build:
          <<: *filter-template-non-master
      
      - get-orig-source:
          <<: *filter-template-master-only

      - amd64-bionic-deb-build:
          <<: *filter-template-master-only
          requires:
            - get-orig-source
      - arm64-bionic-deb-build:
          <<: *filter-template-master-only
          requires:
            - amd64-bionic-deb-build

      - amd64-focal-deb-build:
          <<: *filter-template-master-only
          requires:
            - get-orig-source
      - arm64-focal-deb-build:
          <<: *filter-template-master-only
          requires:
            - amd64-focal-deb-build


            
      # always do the continuous upload if we did the deb builds
      - continuous-upload:
          requires:
            - arm64-focal-deb-build
            - arm64-bionic-deb-build

      # only do the release upload on tagged builds
      - release-upload:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
          requires:
            - arm64-focal-deb-build
            - arm64-bionic-deb-build            
          
jobs:

  get-orig-source:
    <<: *job-template-deb-amd64
    docker: *docker-base-bionic
    environment:
      <<: *environment-template-common
      <<: *environment-template-bionic
      <<: *environment-template-amd64
    steps:
      - checkout
      - run:
          name: Get original source tarball
          command: |
            export NEWVERSION="$(git describe --tags HEAD | sed 's/_/~/' | sed 's/-/+/g')"          
            git config tar.tar.xz.command "xz -c" &&
            mkdir -p /root/src &&
            git archive --prefix=jaiabot-hydro-${NEWVERSION}/ -o /root/src/jaiabot-hydro_${NEWVERSION}.orig.tar.xz HEAD;
      - run:
          name: Add changelog entry 
          command: |
            cd /root &&
            rm -rf debian &&
            git clone https://github.com/jaiarobotics/jaiabot-hydro-debian debian &&
            export NEWVERSION="$(echo /root/src/*.orig.tar.xz | sed 's/.*_\(.*\)\.orig\.tar\.xz/\1/')"
            COMMENT="Autobuild for version ${NEWVERSION}" &&
            dch --newversion=${NEWVERSION}-0~DISTRORELEASEVERSION.1 -D DISTRORELEASECODENAME "${COMMENT}" &&
            cp debian/changelog /root/src
      - store_artifacts:
          path: /root/src
      - persist_to_workspace:
          root: /root/src
          paths:
            - '*.tar.xz'
            - 'changelog'

  amd64-bionic-build:
    <<: *job-template-amd64
    docker: *docker-base-bionic
    environment:
      <<: *environment-template-common
      <<: *environment-template-bionic

  amd64-focal-build:
    <<: *job-template-amd64
    docker: *docker-base-focal
    environment:
      <<: *environment-template-common
      <<: *environment-template-focal
      
  amd64-bionic-deb-build:
    <<: *job-template-deb-amd64
    docker: *docker-base-bionic
    environment:
      <<: *environment-template-common
      <<: *environment-template-bionic
      <<: *environment-template-amd64
  arm64-bionic-deb-build: 
    <<: *job-template-deb-cross
    docker: *docker-arm64-bionic
    environment:
      <<: *environment-template-common
      <<: *environment-template-bionic
      <<: *environment-template-arm64
  amd64-focal-deb-build:
    <<: *job-template-deb-amd64
    docker: *docker-base-focal
    environment:
      <<: *environment-template-common
      <<: *environment-template-focal
      <<: *environment-template-amd64
  arm64-focal-deb-build: 
    <<: *job-template-deb-cross
    docker: *docker-arm64-focal
    environment:
      <<: *environment-template-common
      <<: *environment-template-focal
      <<: *environment-template-arm64
  continuous-upload:
    <<: *job-template-upload
    environment:
      <<: *environment-template-common
      <<: *environment-template-bionic
      <<: *environment-template-amd64
      UPLOAD_DESTINATION: "gobysoft-continuous"
    steps: &steps-upload
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "cd:15:c9:43:48:20:c9:56:58:9e:91:01:74:0d:fe:d2"
      - run: *run-import-gpg
      - attach-workspace:
          at: /root/deb
      - attach-workspace: *attach-src-workspace
      - run:
          name: Move original source into output directory
          command: mv /root/src/* /root/deb
      - run:
          name: Upload packages to packages.gobysoft.org
          command: |
            echo 'trusted-key A8E48CFF6650A07F6EF2B9AD19478082E2F8D3FE' >> ~/.gnupg/gpg.conf
            echo '|1|HjIjI40ko7XtgqXNK8DNuiVcy4Q=|7PEGcXNRmsj1tzGeRjb9UgWIWwE= ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIK8LmTLyo7inmKCa28F2JZBSpQFT1VrwnFpeV1v6PlQE' >> ~/.ssh/known_hosts
            for change_file in /root/deb/*.changes;
            do dput -c ${CIRCLE_WORKING_DIRECTORY}/.circleci/dput.cf ${UPLOAD_DESTINATION} $change_file;
            done
          

  release-upload:
    <<: *job-template-upload
    environment:
      <<: *environment-template-common
      <<: *environment-template-bionic
      <<: *environment-template-amd64
      UPLOAD_DESTINATION: "gobysoft-release"
    steps: *steps-upload
