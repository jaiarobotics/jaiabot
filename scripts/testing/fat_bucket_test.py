import subprocess
import argparse
import time
from datetime import datetime

def downsample(data, factor=2):
    return data[::factor]

# At the start of each mode iteration, calculate and print the estimated total time
def print_mode_estimate(mode, throttle_values):
    total_time = len(throttle_values) * 2
    print(f"\nStarting mode: {mode}")
    print(f"Total points in {mode}: {len(throttle_values)}, Estimated total time: {total_time // 60} minutes {total_time % 60} seconds")

# Print the estimated remaining time for the current mode
def print_remaining_time(mode, remaining_points):
    remaining_time = remaining_points * 2
    print(f"Estimated time remaining for {mode}: {remaining_time // 60} minutes {remaining_time % 60} seconds")

# Define the throttle value lists for different modes
throttle_values_dict = {
    "dive_holds": downsample([
    0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 14, 18, 26, 28, 28, 31, 33, 35, 37, 37, 39, 39, 
    39, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -35, -35, -34, -25, -29, -29, -27, -26, 
    -25, -26, -25, -25, -27, -28, -26, -25, -25, -23, -25, -22, -24, -28, -26, -25, 
    -23, -25, -27, -25, -25, -26, -27, -27, -25, -24, -23, -28, -25, -24, -27, -27, 
    -29, -26, -28, -27, -25, -29, -22, -28, -22, -24, -22, -24, -26, -25, -26, -26, 
    -25, -24, -27, -24, -25, -27, -28, -41, -26, -30, -27, -25, -23, -23, -25, -26, 
    -25, -26, -21, -24, -24, -24, -22, -25, -25, -26, -26, -25, -24, -27, -25, -23, 
    -27, -25, -25, -27, -26, -23, -25, -27, -26, -28, -26, -25, -26, -26, -27, -25, 
    -25, -27, -25, -26, -26, -26, -26, -26, -27, -25, -26, -26, -24, -21, -29, -25, 
    -26, -24, -26, -26, -25, -25, -26, -42, -23, -26, -29, -28, -25, -29, -23, -26, 
    -25, -21, -23, -27, -26, -27, -25, -26, -30, -27, -26, -26, -24, -26, -27, -26, 
    -26, -27, -25, -24, -24, -24, -25, -24, -25, -27, -28, -27, -27, -26, -22, -27, 
    -29, -27, -26, -27, -25, -25, -27, -24, -27, -25, -26, -23, -25, -27, -26, -24, 
    -25, -28, -23, -22, -25, -23, -24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -35, -35, -12, -26, -29, 
    -27, -25, -24, -24, -24, -27, -23, -26, -27, -23, -23, -26, -24, -26, -24, -25, 
    -24, -27, -26, -26, -27, -27, -24, -24, -24, -25, -24, -28, -22, -25, -26, -26, 
    -25, -28, -25, -26, -26, -23, -24, -26, -26, -26, -24, -26, -26, -24, -28, -28, 
    -28, -27, -24, -26, -26, -27, -25, -24, -20, -27, -39, -22, -25, -27, -30, -26, 
    -24, -26, -25, -27, -26, -25, -24, -23, -25, -27, -24, -26, -25, -26, -25, -25, 
    -27, -26, -25, -25, -26, -24, -26, -28, -25, -23, -27, -26, -25, -25, -27, -26, 
    -24, -26, -24, -27, -26, -23, -25, -28, -24, -26, -22, -25, -25, -25, -25, -26, 
    -26, -24, -27, -26, -27, -25, -24, -27, -25, -27, -25, -21, -28, -33, -26, -28, 
    -27, -24, -27, -25, -24, -21, -24, -23, -24, -26, -25, -25, -26, -24, -26, -25, 
    -24, -24, -25, -25, -25, -26, -27, -27, -27, -29, -27, -25, -26, -23, -26, -25, 
    -26, -27, -25, -27, -24, -23, -24, -25, -24, -25, -27, -25, -29, -25, -25, -22, 
    -25, -25, -25, -26, -24, -26, -27, -26, -26, -26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -35, -35, 
    -11, -28, -23, -23, -23, -26, -28, -23, -24, -25, -24, -23, -25, -27, -25, -24, 
    -26, -25, -24, -25, -26, -28, -26, -25, -25, -26, -22, -25, -27, -26, -27, -25, 
    -24, -27, -25, -25, -25, -26, -27, -25, -26, -27, -27, -25, -25, -26, -25, -26, 
    -26, -27, -25, -26, -25, -25, -26, -26, -25, -26, -25, -25, -28, -40, -29, -30, 
    -27, -26, -24, -26, -24, -27, -25, -25, -24, -26, -25, -27, -28, -25, -26, -25, 
    -28, -26, -27, -27, -27, -23, -26, -25, -24, -24, -26, -27, -25, -23, -25, -28, 
    -26, -26, -24, -26, -25, -26, -26, -25, -26, -26, -26, -25, -27, -24, -25, -25, 
    -26, -26, -24, -24, -25, -28, -26, -25, -26, -26, -29, -26, -26, -28, -26, -22, 
    -28, -29, -28, -27, -25, -27, -28, -26, -27, -28, -29, -27, -30, -26, -27, -28, 
    -27, -26, -25, -29, -28, -28, -27, -29, -28, -29, -29, -29, -30, -31, -27, -30, 
    -29, -28, -28, -29, -30, -29, -28, -31, -28, -28, -26, -25, -29, -29, -28, -29, 
    -32, -27, -27, -28, -29, -26, -29, -28, -32, -31, -28, -30, -29, -29, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    "speed2_transits": downsample([
    0, 0, 0, 0, 0, 0, 0, 0, 15, 37, 37, 38, 35, 37, 38, 39, 39, 39, 39, 38, 
    39, 39, 39, 39, 39, 39, 39, 40, 39, 39, 39, 39, 39, 39, 39, 39, 38, 40, 
    39, 38, 36, 33, 33, 36, 38, 40, 36, 33, 33, 35, 37, 35, 37, 39, 10, 10, 
    10, 10, 10, 10, 10, 11, 19, 23, 27, 31, 34, 37, 39, 39, 39, 39, 40, 40, 
    40, 39, 39, 39, 39, 39, 40, 39, 39, 39, 39, 39, 38, 38, 37, 38, 38, 38, 
    37, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 39, 40, 39, 
    39, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 35, 39, 39, 39, 39, 39, 40, 39, 
    39, 39, 39, 38, 39, 39, 39, 38, 39, 39, 39, 39, 38, 38, 37, 38, 39, 39, 
    39, 39, 39, 37, 35, 34, 31, 31, 38, 39, 38, 39, 39, 39, 39, 39, 39, 39, 
    39, 39, 39, 37, 10, 10, 10, 10, 10, 10, 10, 10, 17, 22, 23, 27, 31, 37, 
    39, 39, 38, 36, 33, 32, 30, 29, 28, 30, 30, 33, 33, 35, 37, 37, 36, 37, 
    38, 38, 38, 38, 39, 38, 37, 36, 36, 37, 37, 37, 37, 36, 38, 38, 38, 39, 
    38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 39, 38, 38, 38, 38, 38, 38, 37, 
    36, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 37, 38, 39, 39, 36, 38, 
    39, 40, 39, 39, 39, 39, 39, 39, 39, 39, 39, 38, 37, 35, 36, 36, 39, 38, 
    38, 38, 37, 35, 37, 39, 34, 35, 36, 35, 35, 34, 35, 32, 29, 28, 27, 32, 
    35, 37, 39, 39, 40, 38, 36, 35, 39, 37, 39, 39, 39, 38, 35, 10, 10, 10, 
    10, 10, 10, 10, 10, 10, 19, 24, 24, 27, 29, 32, 36, 37, 39, 39, 39, 36, 
    31, 28, 26, 26, 28, 31, 33, 34, 35, 36, 37, 37, 38, 38, 38, 37, 37, 37, 
    38, 38, 38, 38, 38, 39, 39, 39, 39, 38, 38, 37, 38, 37, 36, 38, 37, 36, 
    36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 38, 37, 36, 0, 
    0, 0, 0, 0]),
    "speed3_transits": downsample([
    0, 0, 0, 10, 43, 47, 51, 55, 55, 56, 56, 56, 58, 58, 59, 59, 59, 59, 59, 59, 
    60, 60, 60, 60, 59, 59, 59, 59, 58, 58, 58, 60, 59, 59, 59, 59, 57, 55, 54, 53, 
    55, 55, 10, 10, 10, 10, 10, 10, 10, 13, 19, 29, 28, 33, 42, 49, 57, 59, 58, 54, 
    47, 40, 31, 28, 30, 33, 42, 46, 50, 55, 57, 59, 60, 59, 59, 59, 59, 58, 57, 54, 
    51, 51, 51, 48, 49, 50, 50, 51, 52, 54, 56, 58, 58, 58, 58, 58, 58, 59, 58, 54, 
    45, 23, 10, 10, 10, 10, 10, 12, 29, 35, 41, 44, 47, 52, 55, 58, 59, 56, 50, 52, 
    56, 58, 59, 59, 59, 59, 60, 59, 59, 59, 59, 59, 60, 58, 57, 58, 59, 59, 59, 59, 
    60, 59, 60, 59, 60, 59, 60, 59, 59, 10, 10, 10, 10, 10, 10, 10, 10, 16, 16, 23, 
    31, 36, 41, 51, 58, 59, 58, 51, 48, 42, 38, 39, 42, 45, 47, 52, 54, 57, 58, 59, 
    59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 58, 57, 58, 58, 58, 59, 58, 59, 59, 59, 
    59, 59, 58, 55, 44, 29, 10, 10, 10, 10, 10, 10, 23, 24, 36, 38, 41, 48, 55, 58, 
    59, 57, 56, 51, 50, 44, 42, 40, 47, 53, 56, 60, 59, 58, 56, 55, 55, 51, 53, 53, 
    58, 59, 59, 59, 59, 59, 58, 59, 59, 59, 59, 58, 58, 58, 58, 55, 56, 10, 10, 10, 
    10, 10, 10, 10, 10, 10, 11, 17, 30, 31, 31, 34, 40, 45, 50, 57, 59, 55, 42, 21, 
    12, 12, 20, 27, 33, 39, 49, 51, 55, 56, 56, 56, 55, 55, 55, 55, 56, 57, 59, 58, 
    57, 53, 47, 42, 34, 10, 10, 10, 32, 35, 22, 28, 32, 39, 46, 52, 59, 59, 55, 49, 
    43, 40, 37, 37, 39, 44, 51, 56, 56, 59, 59, 59, 59, 55, 46, 34, 10, 0, 0, 0, 0]),
    "bottom_dives": downsample([
    0, 0, 0, 0, 0, -35, -135, -135, -135, -135, -135, -135, -135, -135, -135, -135, 0, 0, 0, 0, 
    0, 0, 25, 25, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10, 16, 19, 24, 27, 29, 32, 36, 38, 39, 38, 
    35, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -35, -35, -135, -135, -135, -135, -135, 
    -135, -135, -135, -135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10, 10, 
    10, 11, 19, 21, 24, 24, 26, 28, 29, 27, 25, 24, 0, 0, 0, 0, 0, 0, 0, -35, -35, 
    -135, -135, -135, -135, -135, -135, -135, -135, 0, 0, 0, 0, 0, 0, 25, 25, 25, 
    25, 25, 25, 0, 0, 30, 30, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10, 23, 18, 29, 26, 30, 34, 36, 
    38, 38, 39, 38, 39, 39, 39, 39, 40, 39, 39, 39, 0, 0, 0, 0, 0, 0, 25, 34, 37, 
    33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -35, -35, -135, -135, -135, -135, -135, -135, 
    -135, -135, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    10, 10, 10, 11, 13, 17, 21, 29, 29, 34, 35, 37, 37, 38, 38, 36, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, -35, -35, -135, -135, -135, -135, -135, -135, -135, -135, 0, 0, 0, 
    0, 0, 0, 25, 25, 25, 25, 25, 25, 0, 0, 30, 30, 30, 30, 30, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10, 10, 
    10, 10, 10, 10, 14, 20, 19, 22, 0, 0, 0, 0, 0, 0, 0, 0, -35, -135, -135, -135, 
    -135, -135, -135, -135, -135, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 25, 0, 0, 
    30, 30, 30, 30, 30, 30, 30, 0, 0, 35, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 17, 18, 31, 33, 32, 29, 32, 35, 35, 37, 
    38, 38, 39, 40, 39, 39, 39, 39, 10, 10, 10, 10, 10, 10, 13, 11, 10, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, -35, -35, -135, -135, -135, -135, -135, -135, -135, -135, 0, 
    0, 0, 0, 0, 0, 25, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 10, 10, 10, 10, 13, 12, 20, 20, 33, 38, 39, 39, 39, 40, 39, 36, 34, 
    26, 25, 22, 25, 26, 25, 23, 26, 29, 32, 30, 31, 29, 27, 29, 31, 28, 30, 31, 28, 
    25, 30, 22, 19, 22, 27, 23, 10, 10, 10, 10, 10, 10, 10, 10, 12, 20, 27, 32, 39, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, -35, -35, -135, -135, -135, -135, -135, -135, -135, 
    -135, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 25, 0, 0, 30, 30, 30, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10, 10, 
    10, 18, 21, 33, 36, 34, 36, 32, 28, 24, 23, 29, 29, 28, 30, 29, 31, 30, 29, 28, 
    31, 32, 33, 33, 29, 30, 29, 28, 31, 31, 33, 30, 13, 10, 10, 10, 10, 10, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, -35, -35, -135, -135, -135, -135, -135, -135, -135, -135, 
    0, 0])
}

# Calculate number of samples
total_samples = len(throttle_values_dict["dive_holds"]) + len(throttle_values_dict["speed2_transits"]) + len(throttle_values_dict["speed3_transits"]) + len(throttle_values_dict["bottom_dives"])

# Estimate time for full fat mode (2 seconds per sample)
estimated_time_seconds = total_samples * 2
estimated_time_minutes = estimated_time_seconds / 60

estimated_time_dive_holds = (len(throttle_values_dict["dive_holds"]) * 2) / 60
estimated_time_speed2 = (len(throttle_values_dict["speed2_transits"]) * 2) / 60
estimated_time_speed3 = (len(throttle_values_dict["speed3_transits"]) * 2) / 60
estimated_time_bottom_dives = (len(throttle_values_dict["bottom_dives"]) * 2) / 60

print(f"Total Number of Samples: {total_samples}, Total Seconds: {estimated_time_seconds}, Total Minutes: {estimated_time_minutes}, \nTotal Minutes Dive Hold: {estimated_time_dive_holds}, \nTotal Minutes Speed 2: {estimated_time_speed2}, \nTotal Minutes Speed 3: {estimated_time_speed3}, \nTotal Minutes Bottom Dives: {estimated_time_bottom_dives}")

# Set up argument parsing for bot_id, platform, and mode with named arguments
parser = argparse.ArgumentParser(description="Send commands with throttle values from a selected list.")
parser.add_argument("--bot_id", type=int, required=True, help="The bot ID to use in the command")
parser.add_argument("--platform", type=str, required=True, help="The platform to use in the command")
parser.add_argument("--mode", type=str, required=True, choices=list(throttle_values_dict.keys()) + ["full_fat"], 
                    help="The mode to select the throttle values list, or 'full-fat' to cycle through all lists")
args = parser.parse_args()

# Check if 'full-fat' mode is selected
if args.mode == "full_fat":
    # Iterate through all lists in the dictionary
    for mode, throttle_values in throttle_values_dict.items():
        # Print initial estimate for the mode
        print_mode_estimate(mode, throttle_values)
        
        for i, throttle in enumerate(throttle_values):
            # Calculate and print the remaining time
            remaining_points = len(throttle_values) - i
            print_remaining_time(mode, remaining_points)
            command = f"goby zeromq publish jaiabot::engineering_command jaiabot.protobuf.Engineering 'bot_id: {args.bot_id} time: 0 pid_control {{ timeout: 2 throttle: {throttle} rudder: 0 }}' --interprocess 'platform: \"{args.platform}\"'"
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            print(f"\n[{timestamp}] Sending command: {command}\n")
            subprocess.run(command, shell=True)
else:
    # Get the throttle values list based on the selected mode
    throttle_values = throttle_values_dict[args.mode]

    # Print initial estimate for the selected mode
    print_mode_estimate(args.mode, throttle_values)
    
    # Iterate over throttle values and send the command for each value
    for i, throttle in enumerate(throttle_values):

        # Calculate and print the remaining time
        remaining_points = len(throttle_values) - i
        print_remaining_time(args.mode, remaining_points)

        command = f"goby zeromq publish jaiabot::engineering_command jaiabot.protobuf.Engineering 'bot_id: {args.bot_id} time: 0 pid_control {{ timeout: 2 throttle: {throttle} rudder: 0 }}' --interprocess 'platform: \"{args.platform}\"'"
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        print(f"\n[{timestamp}] Sending command: {command}\n")
        subprocess.run(command, shell=True)

print("\n************************COMPLETE***************************\n")
