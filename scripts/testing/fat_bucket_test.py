import subprocess
import argparse
import time
from datetime import datetime

def downsample(data, factor=2):
    return data[::factor]

# At the start of each mode iteration, calculate and print the estimated total time
def print_mode_estimate(mode, throttle_values):
    total_time = len(throttle_values) * 2
    print(f"\nStarting mode: {mode}")
    print(f"Total points in {mode}: {len(throttle_values)}, Estimated total time: {total_time // 60} minutes {total_time % 60} seconds")

# Print the estimated remaining time for the current mode
def print_remaining_time(mode, remaining_points):
    remaining_time = remaining_points * 2
    print(f"Estimated time remaining for {mode}: {remaining_time // 60} minutes {remaining_time % 60} seconds")

# Define the throttle value lists for different modes
throttle_values_dict = {
    "dive_holds": downsample([
    38, 38, 38, 37, 37, 36, 37, 37, 39, 39, 39, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, -45, -45, -31, -34, -35, -38, -31, -32, -35, -35, -32, -34, -31, -33, -32, 
    -30, -34, -34, -36, -33, -33, -35, -35, -34, -35, -34, -32, -33, -33, -33, -33,
    -34, -33, -31, -30, -33, -33, -33, -33, -33, -33, -33, -35, -33, -33, -33, -34, 
    -35, -32, -34, -35, -34, -33, -32, -33, -33, -33, -35, -34, -34, -34, -35, -33, 
    -30, -32, -45, -25, -36, -31, -36, -27, -40, -32, -31, -34, -34, -33, -32, -35, 
    -32, -32, -31, -33, -35, -33, -35, -26, -35, -30, -32, -34, -37, -35, -37, -33,
    -31, -35, -33, -35, -33, -34, -34, -32, -35, -31, -31, -33, -34, -33, -33, -31,
    -38, -33, -35, -34, -33, -32, -32, -36, -30, -32, -35, -33, -33, -32, -33, -34,
    -34, -33, -47, -34, -35, -40, -36, -35, -35, -35, -35, -32, -36, -34, -33, -33,
    -33, -32, -33, -35, -32, -34, -34, -32, -35, -33, -34, -32, -34, -35, -33, -33,
    -34, -33, -32, -33, -33, -33, -34, -34, -33, -32, -33, -33, -34, -35, -34, -35,
    -33, -33, -34, -33, -33, -33, -33, -33, -33, -33, -35, -34, -33, -33, -32, -34,
    -33, -31, -33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45, -135, -30, -37, -27, -32, -35, -32,
    -33, -32, -32, -32, -34, -32, -31, -30, -34, -32, -31, -32, -32, -33, -30, -33,
    -32, -30, -32, -32, -32, -32, -33, -31, -29, -32, -30, -32, -31, -32, -33, -31,
    -34, -34, -31, -31, -31, -32, -31, -31, -32, -31, -35, -33, -32, -32, -31, -32,
    -34, -33, -32, -31, -32, -32, -31, -32, -32, -41, -41, -42, -38, -34, -35, -31,
    -32, -29, -31, -34, -33, -30, -31, -32, -31, -31, -32, -33, -30, -30, -32, -31,
    -30, -31, -32, -32, -33, -33, -32, -31, -34, -31, -32, -32, -32, -32, -32, -32,
    -31, -31, -31, -32, -32, -32, -31, -33, -35, -33, -33, -32, -31, -32, -32, -32,
    -31, -31, -32, -32, -31, -31, -33, -31, -32, -49, -27, -34, -28, -37, -32, -30,
    -33, -33, -32, -32, -32, -33, -34, -35, -33, -33, -32, -33, -33, -32, -35, -32,
    -32, -30, -33, -33, -33, -34, -34, -30, -33, -35, -35, -33, -33, -33, -32, -34,
    -32, -32, -32, -33, -31, -32, -31, -32, -35, -33, -32, -33, -33, -31, -34, -33,
    -32, -30, -30, -32, -32, -31, -32, -33, -33, -32, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45,
    -45, -39, -38, -31, -31, -30, -36, -31, -32, -29, -29, -32, -32, -31, -32, -32,
    -30, -29, -29, -30, -32, -32, -30, -31, -31, -29, -28, -31, -28, -31, -30, -30,
    -32, -30, -32, -31, -33, -31, -30, -31, -31, -31, -31, -30, -32, -30, -31, -31,
    -29, -28, -33, -27, -32, -32, -33, -33, -31, -32, -30, -31, -33, -29, -31, -30,
    -43, -35, -30, -34, -32, -27, -33, -32, -30, -31, -31, -32, -30, -32, -32, -30,
    -32, -29, -31, -33, -31, -31, -30, -33, -33, -30, -30, -32, -32, -28, -31, -31,
    -30, -31, -32, -33, -33, -32, -31, -32, -32, -31, -31, -32, -34, -31, -31, -34,
    -31, -30, -32, -30, -32, -31, -30, -30, -31, -32, -33, -31, -32, -31, -31, -30,
    -32, -39, -41, -41, -33, -30, -28, -32, -29, -33, -31, -31, -30, -31, -32, -34,
    -35, -33, -33, -32, -34, -32, -34, -32, -32, -33, -32, -33, -34, -32, -32, -32,
    -32, -30, -30, -31, -32, -31, -32, -35, -33, -32, -31, -32, -31, -32, -36, -32,
    -33, -35, -31, -31, -30, -31, -33, -33, -31, -31, -28, -32, -32, -34, -30, -32,
    -31, -32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10, 10, 22, 21, 26, 27, 27, 25]),
    "speed2_transits": downsample([
    33, 38, 39, 39, 39, 39, 38, 37, 35, 36, 36, 36, 35, 35, 35, 34, 34, 36, 37, 37, 
    38, 38, 38, 38, 38, 38, 38, 39, 39, 38, 38, 38, 39, 39, 39, 39, 39, 38, 39, 37,
    38, 39, 39, 38, 38, 39, 39, 39, 38, 38, 39, 38, 39, 39, 39, 39, 38, 39, 39, 38, 
    38, 38, 39, 40, 39, 39, 38, 10, 10, 10, 10, 10, 13, 17, 19, 18, 21, 25, 29, 32, 
    35, 36, 38, 39, 39, 39, 39, 39, 39, 39, 38, 38, 39, 38, 37, 39, 39, 39, 39, 40, 
    40, 40, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 38, 38, 38, 38, 38, 39, 
    39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 39, 39, 39, 39, 39, 39, 38, 
    39, 38, 38, 39, 39, 39, 39, 39, 39, 38, 39, 10, 10, 10, 10, 10, 10, 10, 15, 23, 
    29, 33, 36, 37, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 39, 39, 39, 39, 39, 
    39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 39, 39, 39, 39, 
    39, 39, 39, 39, 40, 40, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 
    39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 10, 10, 10, 10, 10, 10, 13, 17, 16, 18, 
    19, 20, 23, 24, 26, 28, 29, 31, 33, 34, 36, 37, 39, 39, 39, 39, 38, 38, 38, 37, 
    38, 38, 37, 38, 38, 39, 39, 39, 40, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 
    39, 39, 39, 40, 39, 40, 40, 39, 40, 40, 40, 40, 39, 39, 40, 40, 39, 40, 39, 39, 
    39, 40, 39, 39, 39, 39, 39, 39, 40, 39, 40, 40, 39, 39, 39, 39, 39, 39, 39, 39, 
    39, 39, 39, 39, 39, 10, 10, 10, 10, 10, 10, 15, 21, 25, 31, 35, 37, 39, 40, 39, 
    38, 37, 35, 34, 34, 32, 32, 33, 33, 34, 35, 35, 36, 36, 37, 37, 38, 38, 38, 38, 
    38, 38, 38, 38, 39, 39, 38, 38, 39, 38, 39, 39, 39, 39, 39, 39, 39, 38, 38, 38, 
    38, 37, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 
    39, 39, 39, 39, 39, 38, 37, 10, 10, 10, 10, 10, 10, 13, 15, 18, 18, 21, 19, 23, 
    25, 27, 30, 33, 36, 37, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 
    40, 40, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 38, 38, 38, 38, 38, 39, 
    39, 39, 39, 39, 39, 39, 40, 40, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 
    39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 0, 0]),
    "speed3_transits": downsample([
    10, 10, 10, 26, 38, 47, 53, 56, 59, 59, 59, 54, 48, 41, 37, 41, 45, 48, 51, 52, 
    53, 54, 55, 56, 56, 57, 57, 57, 57, 56, 55, 56, 55, 53, 53, 52, 52, 53, 54, 54, 
    56, 56, 56, 57, 58, 59, 59, 59, 58, 58, 57, 57, 58, 57, 53, 45, 10, 10, 10, 10, 
    10, 15, 21, 28, 28, 30, 32, 31, 35, 40, 41, 47, 51, 53, 56, 57, 59, 59, 59, 60, 
    59, 59, 59, 59, 60, 59, 59, 59, 59, 59, 59, 59, 57, 56, 53, 56, 56, 57, 57, 58, 
    58, 58, 58, 59, 59, 59, 59, 59, 60, 60, 59, 59, 59, 59, 59, 59, 59, 59, 59, 0, 
    10, 10, 10, 10, 10, 22, 33, 40, 46, 51, 54, 58, 59, 59, 56, 50, 41, 38, 40, 45, 
    48, 48, 49, 49, 49, 49, 49, 49, 52, 54, 56, 56, 56, 55, 54, 53, 52, 53, 54, 55, 
    57, 57, 58, 59, 59, 59, 59, 59, 59, 59, 59, 58, 57, 57, 58, 58, 57, 56, 54, 51, 
    46, 39, 36, 10, 10, 10, 10, 10, 10, 10, 15, 25, 31, 39, 47, 52, 54, 56, 56, 57, 
    56, 54, 55, 57, 58, 59, 59, 59, 59, 60, 59, 59, 59, 58, 57, 56, 57, 57, 57, 56, 
    57, 58, 59, 58, 58, 58, 59, 59, 59, 59, 59, 58, 58, 59, 59, 59, 58, 58, 58, 58, 
    59, 58, 58, 58, 57, 10, 10, 10, 10, 10, 10, 10, 10, 10, 19, 30, 33, 38, 39, 42, 
    46, 55, 58, 58, 59, 60, 59, 54, 50, 49, 48, 46, 46, 48, 48, 49, 50, 51, 53, 53, 
    54, 55, 55, 54, 54, 53, 55, 55, 55, 55, 56, 57, 58, 58, 57, 55, 56, 54, 53, 54, 
    56, 55, 56, 58, 59, 60, 59, 59, 59, 57, 57, 55, 47, 33, 28, 10, 10, 10, 10, 10, 
    10, 10, 11, 18, 29, 35, 39, 41, 47, 48, 51, 55, 56, 55, 57, 56, 57, 58, 58, 59, 
    59, 59, 60, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 58, 57, 56, 55, 55, 55, 
    55, 57, 59, 59, 59, 60, 59, 59, 58, 59, 59, 59, 59, 59, 60, 59, 59, 59, 59, 0, 0]),
    "bottom_dives": downsample([
    0, -45, -45, -135, -135, -135, -135, -135, -135, -131, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 
    53, 55, 55, 55, 55, 56, 56, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45, -135, -135, 
    -135, -135, -135, -135, -135, -135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 56, 56, 56, 56, 56, 56, 56, 
    55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45, -45, -135, -135, -135, -135, -135, -135, 
    -135, 0, 0, 0, 0, 0, 0, 35, 35, 35, 35, 35, 35, 0, 0, 40, 40, 40, 40, 40, 40, 
    40, 0, 0, 0, 45, 45, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 56, 56, 56, 56, 57, 56, 56, 55, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, -45, -45, -135, -135, -135, -135, -135, -135, -135, 0, 
    0, 0, 0, 0, 0, 35, 35, 35, 35, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 26, 26, 26, 53, 53, 54, 54, 54, 54, 55, 
    55, 55, 56, 56, 56, 56, 57, 56, 56, 56, 0, 0, 0, 0, 56, 55, 56, 56, 56, 56, 56, 
    56, 56, 56, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45, -135, -135, -135, -135, -135, 
    -135, -134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 26, 26, 
    53, 54, 54, 54, 56, 56, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45, -135, -135, 
    -135, -135, -135, -135, 0, 0, 0, 0, 0, 0, 35, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 55, 56, 56, 56, 56, 56, 56, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, -45, -135, -135, -135, -135, -135, -135, 0, 0, 0, 0, 0, 0, 35, 
    35, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 26, 
    26, 26, 26, 28, 38, 51, 54, 55, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 
    56, 56, 56, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45, -45, -135, -135, -135, -135, 
    -135, -135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 54, 56, 56, 56, 56, 56, 56, 56, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, -45, -135, -135, -135, -135, -135, -135, -130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 55, 56, 56, 56, 56, 56, 56, 56, 55, 
    54, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45, -135, -135, -135, -135, -135, -135, 
    -135, -134, 0])
}

# Calculate number of samples
total_samples = len(throttle_values_dict["dive_holds"]) + len(throttle_values_dict["speed2_transits"]) + len(throttle_values_dict["speed3_transits"]) + len(throttle_values_dict["bottom_dives"])

# Estimate time for full fat mode (2 seconds per sample)
estimated_time_seconds = total_samples * 2
estimated_time_minutes = estimated_time_seconds / 60

estimated_time_dive_holds = (len(throttle_values_dict["dive_holds"]) * 2) / 60
estimated_time_speed2 = (len(throttle_values_dict["speed2_transits"]) * 2) / 60
estimated_time_speed3 = (len(throttle_values_dict["speed3_transits"]) * 2) / 60
estimated_time_bottom_dives = (len(throttle_values_dict["bottom_dives"]) * 2) / 60

print(f"Total Number of Samples: {total_samples}, Total Seconds: {estimated_time_seconds}, Total Minutes: {estimated_time_minutes}, \nTotal Minutes Dive Hold: {estimated_time_dive_holds}, \nTotal Minutes Speed 2: {estimated_time_speed2}, \nTotal Minutes Speed3: {estimated_time_speed3}, \nTotal Minutes Bottom Dives: {estimated_time_bottom_dives}")

# Set up argument parsing for bot_id, platform, and mode with named arguments
parser = argparse.ArgumentParser(description="Send commands with throttle values from a selected list.")
parser.add_argument("--bot_id", type=int, required=True, help="The bot ID to use in the command")
parser.add_argument("--platform", type=str, required=True, help="The platform to use in the command")
parser.add_argument("--mode", type=str, required=True, choices=list(throttle_values_dict.keys()) + ["full_fat"], 
                    help="The mode to select the throttle values list, or 'full-fat' to cycle through all lists")
args = parser.parse_args()

# Check if 'full-fat' mode is selected
if args.mode == "full_fat":
    # Iterate through all lists in the dictionary
    for mode, throttle_values in throttle_values_dict.items():
        # Print initial estimate for the mode
        print_mode_estimate(mode, throttle_values)
        
        for i, throttle in enumerate(throttle_values):
            # Calculate and print the remaining time
            remaining_points = len(throttle_values) - i
            print_remaining_time(mode, remaining_points)
            command = f"goby zeromq publish jaiabot::engineering_command jaiabot.protobuf.Engineering 'bot_id: {args.bot_id} time: 0 pid_control {{ timeout: 2 throttle: {throttle} rudder: 0 }}' --interprocess 'platform: \"{args.platform}\"'"
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            print(f"\n[{timestamp}] Sending command: {command}\n")
            subprocess.run(command, shell=True)
else:
    # Get the throttle values list based on the selected mode
    throttle_values = throttle_values_dict[args.mode]

    # Print initial estimate for the selected mode
    print_mode_estimate(args.mode, throttle_values)
    
    # Iterate over throttle values and send the command for each value
    for i, throttle in enumerate(throttle_values):

        # Calculate and print the remaining time
        remaining_points = len(throttle_values) - i
        print_remaining_time(args.mode, remaining_points)

        command = f"goby zeromq publish jaiabot::engineering_command jaiabot.protobuf.Engineering 'bot_id: {args.bot_id} time: 0 pid_control {{ timeout: 2 throttle: {throttle} rudder: 0 }}' --interprocess 'platform: \"{args.platform}\"'"
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        print(f"\n[{timestamp}] Sending command: {command}\n")
        subprocess.run(command, shell=True)

print("\n************************COMPLETE***************************\n")
