#!/bin/sh -e

# Source debconf library.
. /usr/share/debconf/confmodule

# Enable backup capability
db_capb backup

# General function for handling debconf input and go
# Returns 0 if the user moves forward, 1 if the user chooses to back up
debconf_input_and_go() {
    db_input "$1" "$2" || true
    if db_go; then
        return 0
    else
        return 1
    fi
}

go_menu() {
    db_fset $1 seen false
    db_input high $1 || true
    db_go
    db_get $1
    state=$RET
}

# State machine for common configuration
configure_common() {
    local state="type"
    while true; do
        db_set jaiabot-embedded/debconf_state_common $state
        case $state in
            "type")
                if debconf_input_and_go high jaiabot-embedded/type; then
                    state="fleet_id"
                else
                    go_menu jaiabot-embedded/debconf_state_common
                fi
                ;;
            "fleet_id")
                if debconf_input_and_go high jaiabot-embedded/fleet_id; then
                    state="led_type"
                else
                    go_menu jaiabot-embedded/debconf_state_common
                fi
                ;;
            "led_type")
                if debconf_input_and_go high jaiabot-embedded/led_type; then
                    state="electronics_stack"
                else
                    go_menu jaiabot-embedded/debconf_state_common
                fi
                ;;
            "electronics_stack")
                if debconf_input_and_go high jaiabot-embedded/electronics_stack; then
                    state="mode"
                else
                    go_menu jaiabot-embedded/debconf_state_common
                fi
                ;;
            "mode")
                if debconf_input_and_go medium jaiabot-embedded/mode; then
                    db_get jaiabot-embedded/mode
                    JAIA_MODE=$RET
                    if [ "$JAIA_MODE" = "simulation" ]; then
                        state="warp"
                    else
                        return 0  # Success, end configuration
                    fi
                else
                    go_menu jaiabot-embedded/debconf_state_common
                fi
                ;;
            # only ask if mode == simulation
            "warp")
                if debconf_input_and_go medium jaiabot-embedded/warp; then
                    return 0  # Success, end configuration
                else
                    go_menu jaiabot-embedded/debconf_state_common
                fi
                ;;
            "NEXT")
                return 0
                ;;
            *)
                echo "Invalid state encountered in configure_common: $state"
                return 1
                ;;
        esac
    done
}

# State machine for "bot" configuration
configure_bot() {
    local state="bot_id"
    while true; do
        db_set jaiabot-embedded/debconf_state_bot $state
        case $state in
            "BACK")
                return 1
                ;;
            "bot_id")
                if debconf_input_and_go high jaiabot-embedded/bot_id; then
                    state="arduino_type"
                else
                    go_menu jaiabot-embedded/debconf_state_bot
                fi
                ;;
            "arduino_type")
                if debconf_input_and_go high jaiabot-embedded/arduino_type; then
                    db_get jaiabot-embedded/arduino_type
                    ARDUINO_TYPE=$RET
                    # backwards compatibility for old arduino_type settings
                    if [ "$ARDUINO_TYPE" = "usb_old" ] || [ "$ARDUINO_TYPE" = "usb_new" ]; then
                        db_set jaiabot-embedded/arduino_type usb
                    fi
                    state="imu_type"
                else
                    go_menu jaiabot-embedded/debconf_state_bot
                fi
                ;;
            "imu_type")
                if debconf_input_and_go high jaiabot-embedded/imu_type; then
                    state="bot_type"
                else
                    go_menu jaiabot-embedded/debconf_state_bot

                fi
                ;;
            "bot_type")
                if debconf_input_and_go high jaiabot-embedded/bot_type; then
                    state="data_offload_ignore_type"
                else
                    go_menu jaiabot-embedded/debconf_state_bot

                fi
                ;;
            "data_offload_ignore_type")
                if debconf_input_and_go medium jaiabot-embedded/data_offload_ignore_type; then
                    state="imu_install_type"
                else
                    go_menu jaiabot-embedded/debconf_state_bot
                fi
                ;;
            "imu_install_type")
                if debconf_input_and_go high jaiabot-embedded/imu_install_type; then
                    return 0  # success, end configuration
                else
                    go_menu jaiabot-embedded/debconf_state_bot

                fi
                ;;
            "EXIT")
                return 0
                ;;
            *)
                echo "Invalid state encountered in configure_bot: $state"
                return 1
                ;;
        esac
    done
}

# State machine for "hub" configuration
configure_hub() {
    local state="hub_id"
    while true; do
        db_set jaiabot-embedded/debconf_state_hub $state
        case $state in
            "BACK")
                return 1
                ;;
            "hub_id")
                if debconf_input_and_go high jaiabot-embedded/hub_id; then
                    state="user_role"
                else
                    go_menu jaiabot-embedded/debconf_state_hub
                fi
                ;;
            "user_role")
                if debconf_input_and_go medium jaiabot-embedded/user_role; then
                    return 0  # success, end configuration
                else
                    go_menu jaiabot-embedded/debconf_state_hub
                fi
                ;;            
            "EXIT")
                return 0
                ;;
            *)
                echo "Invalid state encountered in configure_hub: $state"
                return 1
                ;;
        esac
    done
}

# State machine for overall configuration
configure() {
    local state="CONFIGURE_COMMON"
    while true; do
        case $state in
            "CONFIGURE_COMMON")
                if configure_common; then
                    db_get jaiabot-embedded/type
                    JAIA_TYPE=$RET                    
                    if [ "$JAIA_TYPE" = "bot" ]; then
                        state="CONFIGURE_BOT"
                    elif [ "$JAIA_TYPE" = "hub" ]; then
                        state="CONFIGURE_HUB"
                    fi
                fi
                ;;
            "CONFIGURE_BOT")
                if configure_bot; then
                    return 0  # Success, end configuration
                else
                    state="CONFIGURE_COMMON"
                fi
                ;;            
            "CONFIGURE_HUB")
                if configure_hub; then
                    return 0  # Success, end configuration
                else
                    state="CONFIGURE_COMMON"
                fi
                ;;            
            *)
                echo "Invalid state encountered in configure: $state"
                return 1
                ;;
        esac
    done
}

configure
