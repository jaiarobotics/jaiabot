---
- name: Create new VirtualFleet EC2 instances (and delete any old ones)
  hosts: localhost
  gather_facts: yes
  vars:
    warp: 5
    instance_type: t3a.small
    volume_size_gb: 16
    server_ssh_privkey_path: /home/jaia/.ssh/id_ed25519
    server_ssh_pubkey_path: /home/jaia/.ssh/id_ed25519.pub

  tasks:
    - include_tasks: tasks/gen-node-map.yml

    - name: Read cloud.env
      include_tasks: tasks/read-env.yml
      tags: read

    - name: VirtualFleet VPN setup
      include_tasks: tasks/vfleet-vpn-setup.yml
      tags: read

    - name: Read IP addresses
      include_tasks: tasks/read-ip-addresses.yml    
      tags: read

    - name: Read publickeys configured on Cloudhub and use these for VirtualFleet
      set_fact:
        user_ssh_pubkeys: "{{ lookup('file', '/home/jaia/.ssh/authorized_keys') }}"
      tags: read

    - name: Generate OpenSSH keypair
      community.crypto.openssh_keypair:
        path: "{{ server_ssh_privkey_path }}"
        type: ed25519
      tags: read

    - name: Read server publickey
      set_fact:
        server_ssh_pubkey: "{{ lookup('file', server_ssh_pubkey_path) }}"
        tags: read
      tags: read
        
    - name: Find latest AMI
      amazon.aws.ec2_ami_info:
        region: "{{ cloud_env_vars.jaia_aws_region }}"
        filters:
          "tag:jaiabot-rootfs-gen_repository": "{{ cloud_env_vars.jaia_aws_virtualfleet_repository }}"
          "tag:jaiabot-rootfs-gen_repository_version": "{{ cloud_env_vars.jaia_aws_virtualfleet_repository_version }}"
      register: ami_info

    - name: Set ami_info (present)
      set_fact:
        ami_id: "{{ ami_info.images[0].image_id }}"

    - name: Terminate any old EC2 instances from this fleet to ensure consistency and correct VPN settings
      amazon.aws.ec2_instance:
        region: "{{ cloud_env_vars.jaia_aws_region }}"
        filters:        
          tag:jaia_instance_type: "virtualfleet"
          tag:jaia_fleet: "{{ cloud_env_vars.jaia_fleet_index }}"
          tag:jaia_customer: "{{ jaia_customer_no_quotes }}"
        wait: true
        state: terminated

    - name: Clear out old known_hosts file
      file:
        path: /home/jaia/.ssh/known_hosts
        state: absent
        
    - name: Create EC2 instances
      amazon.aws.ec2_instance:
        name: "jaia__Virtual{{ item.node_type | capitalize }}{{ item.node_id }}__{{ jaia_customer_no_quotes }}"
        region: "{{ cloud_env_vars.jaia_aws_region }}"
        image_id: "{{ ami_id }}"
        instance_type: "{{ instance_type }}"
        security_group: "{{ cloud_env_vars.jaia_aws_virtualfleet_security_group }}"
        subnet_id: "{{ cloud_env_vars.jaia_aws_virtualfleet_wlan_subnet_id }}"
        network:
          private_ip_address: "{{ wlan_ipv4_addresses[item.node_type][item.node_id] }}"
          description: "wlan"
        volumes:
        - device_name: /dev/sda1
          ebs:
            delete_on_termination: true
            volume_type: gp3
            volume_size: "{{ volume_size_gb }}"
        tags:
          jaia_instance_type: "virtualfleet"
          jaia_node_type: "{{ item.node_type }}"
          jaia_node_id: "{{ item.node_id }}"
          jaia_fleet: "{{ cloud_env_vars.jaia_fleet_index }}"
          jaia_customer: "{{ jaia_customer_no_quotes }}"
          jaiabot-rootfs-gen_repository: "{{ cloud_env_vars.jaia_aws_virtualfleet_repository }}"
          jaiabot-rootfs-gen_repository_version: "{{ cloud_env_vars.jaia_aws_virtualfleet_repository_version }}"          
        user_data: "{{ lookup('template', 'templates/cloud_vfleet_user_data.sh.j2') }}"
        wait: false
        state: present
      loop: "{{ node_map }}"
      # Avoid writing private Wireguard keys into the log
      no_log: true
      register: ec2_instances
        
    - name: Update peer blocks in WireGuard config
      blockinfile:
        path: /etc/wireguard/wg_virtualfleet.conf
        block: |
          {{ lookup('template', 'templates/wireguard_peer.j2') }}
        marker: "# {mark} PEER {{ item.item.node_type }} {{ item.item.node_id }}: AUTOGENERATED"
        create: no
      loop: "{{ ec2_instances.results }}"
      become: yes

    - name: Restart WireGuard
      become: yes
      shell: "systemctl restart wg-quick@wg_virtualfleet"

    - name: Write /etc/hosts
      include_tasks: tasks/write-etc-hosts.yml

    - name: Wait for hosts
      include_tasks: tasks/wait-hosts.yml

    - name: Run fleet-config.sh
      include_tasks: tasks/run-fleet-config.yml

    - name: Copy VirtualFleet inventory (created by fleet-config.sh)
      shell: |
        cp /tmp/jaiabot-ansible-vfleet-inventory.yml /etc/jaiabot/vfleet-inventory.yml
      become: yes

    - name: Stop instances state
      include_tasks: tasks/instance-state.yml
      vars: 
        - do_wait: true
        - desired_state: stopped

    - name: Start instances state
      include_tasks: tasks/instance-state.yml
      vars: 
        - do_wait: true
        - desired_state: running

    - name: Wait for hosts
      include_tasks: tasks/wait-hosts.yml
