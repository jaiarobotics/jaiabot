---
- name: Create new VirtualFleet EC2 instances (and delete any old ones)
  hosts: localhost
  gather_facts: yes
  vars:
    node_map:
      - { node_type: 'hub', node_id: '1' }
      - { node_type: 'bot', node_id: '1' }

  tasks:
    - name: Read cloud.env
      include_tasks: tasks/cloud-read-env.yml
      tags: read

    - name: VirtualFleet VPN setup
      include_tasks: tasks/cloud-vfleet-vpn-setup.yml
      tags: read

    - name: Read IP addresses
      include_tasks: tasks/cloud-read-ip-addresses.yml    
      tags: read

    - name: Find latest AMI
      amazon.aws.ec2_ami_info:
        region: "{{ cloud_env_vars.jaia_aws_region }}"
        filters:
          "tag:jaiabot-rootfs-gen_repository": "{{ cloud_env_vars.jaia_aws_virtualfleet_repository }}"
          "tag:jaiabot-rootfs-gen_repository_version": "{{ cloud_env_vars.jaia_aws_virtualfleet_repository_version }}"
      register: ami_info

    - name: Set ami_info (present)
      set_fact:
        ami_id: "{{ ami_info.images[0].image_id }}"

    - name: Terminate any old EC2 instances from this fleet to ensure consistency and correct VPN settings
      amazon.aws.ec2_instance:
        region: "{{ cloud_env_vars.jaia_aws_region }}"
        filters:        
          tag:jaia_instance_type: "virtualfleet"
          tag:jaia_fleet: "{{ cloud_env_vars.jaia_fleet_index }}"
          tag:jaia_customer: "{{ jaia_customer_no_quotes }}"
        wait: false
        state: terminated

    - name: Create EC2 instances
      amazon.aws.ec2_instance:
        name: "jaia__Virtual{{ item.node_type | capitalize }}{{ item.node_id }}__{{ jaia_customer_no_quotes }}"
        region: "{{ cloud_env_vars.jaia_aws_region }}"
        image_id: "{{ ami_id }}"
        instance_type: "t3a.medium"
        vpc_subnet_id: 
        network:
          - subnet_id: "{{ cloud_env_vars.jaia_aws_virtualfleet_eth0_subnet_id }}"
            security_group: "{{ cloud_env_vars.jaia_aws_virtualfleet_security_group }}"
          - subnet_id: "{{ cloud_env_vars.jaia_aws_virtualfleet_wlan_subnet_id }}"
            security_group: "{{ cloud_env_vars.jaia_aws_virtualfleet_security_group }}"
        tags:
          jaia_instance_type: "virtualfleet"
          jaia_node_type: "{{ item.node_type }}"
          jaia_node_id: "{{ item.node_id }}"
          jaia_fleet: "{{ cloud_env_vars.jaia_fleet_index }}"
          jaia_customer: "{{ jaia_customer_no_quotes }}"
          jaiabot-rootfs-gen_repository: "{{ cloud_env_vars.jaia_aws_virtualfleet_repository }}"
          jaiabot-rootfs-gen_repository_version: "{{ cloud_env_vars.jaia_aws_virtualfleet_repository_version }}"          
        user_data: "{{ lookup('template', 'templates/cloud_vfleet_user_data.sh.j2') }}"
        wait: false
        state: present
      loop: "{{ node_map }}"
      no_log: true
      register: ec2_instances

    - name: Print results
      debug:
        var: ec2_instances      
      
    - name: Update peer blocks in WireGuard config
      blockinfile:
        path: /etc/wireguard/wg_virtualfleet.conf
        block: |
          {{ lookup('template', 'templates/wireguard_peer.j2') }}
        marker: "# {mark} PEER {{ item.item.node_type }} {{ item.item.node_id }}: AUTOGENERATED"
        create: no
      loop: "{{ ec2_instances.results }}"
      become: yes

    - name: Restart WireGuard
      become: yes
      ansible.builtin.systemd:
        name: wg-quick@wg_virtualfleet
        state: restarted
        daemon_reload: yes
