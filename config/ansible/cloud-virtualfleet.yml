---
- name: Start EC2 instances
  hosts: localhost
  gather_facts: yes
  vars:
    node_map:
      - { node_type: 'hub', node_id: '1', ipv6_address: 'fd6e:cf0d:aefa:3::0:1' }
      - { node_type: 'bot', node_id: '1', ipv6_address: 'fd6e:cf0d:aefa:3::1:1' }

  tasks:
    - name: Initialize dictionaries
      set_fact:
        private_vpn_keys: {}
        public_vpn_keys: {}
      tags: test 

    - name: Generate WireGuard private key for each instance
      command: wg genkey
      register: wg_private_key
      loop: "{{ node_map }}"
      no_log: true
      tags: test 

    - name: Add WireGuard private keys to vpn_keys dictionary
      set_fact:
        private_vpn_keys: "{{ private_vpn_keys | combine({item.item.node_type: {item.item.node_id: item.stdout}}) }}"
      loop: "{{ wg_private_key.results }}"
      no_log: true
      tags: test 

    - name: Generate WireGuard public key for each instance
      shell: echo "{{ private_vpn_keys[item.node_type][item.node_id] }}" | wg pubkey
      register: wg_public_key
      loop: "{{ node_map }}"
      no_log: true
      tags: test 

    - name: Add WireGuard private keys to vpn_keys dictionary
      set_fact:
        public_vpn_keys: "{{ public_vpn_keys | combine({item.item.node_type: {item.item.node_id: item.stdout}}) }}"
      loop: "{{ wg_public_key.results }}"
      no_log: true
      tags: test 

    - name: Read /etc/jaiabot/cloud.env
      shell: "cat /etc/jaiabot/cloud.env | grep -v '^#' | grep -v '^$'"
      register: cloud_env_output
      tags: test 

    - name: Set facts from cloud.env
      set_fact:
        cloud_env_vars: "{{ cloud_env_vars | default({}) | combine({ item.split('=', 1)[0]: (item.split('=', 1)[1] | default('')) }) }}"
      loop: "{{ cloud_env_output.stdout_lines }}"
      tags: test 

    - name: Set derived facts using cloud.env
      set_fact:
        jaia_customer_no_quotes: "{{ cloud_env_vars.jaia_aws_customer | regex_replace('^\"|\"$', '') }}"


    - name: Find latest AMI
      amazon.aws.ec2_ami_info:
        region: "{{ cloud_env_vars.jaia_aws_region }}"
        filters:
          "tag:jaiabot-rootfs-gen_repository": "{{ cloud_env_vars.jaia_aws_virtualfleet_repository }}"
          "tag:jaiabot-rootfs-gen_repository_version": "{{ cloud_env_vars.jaia_aws_virtualfleet_repository_version }}"
      register: ami_info

    - name: Show ami_info
      ansible.builtin.debug:
        var: ami_info
      
    - name: Start EC2 instances
      amazon.aws.ec2_instance:
        name: "jaia__Virtual{{ item.node_type | capitalize }}{{ item.node_id }}__{{ jaia_customer_no_quotes }}"
        region: "{{ cloud_env_vars.jaia_aws_region }}"
        image_id: "{{ ami_info.images[0].image_id }}"
        instance_type: "t3a.medium"
        vpc_subnet_id: "{{ cloud_env_vars.jaia_aws_virtualfleet_wlan_subnet_id }}"
        security_group: "{{ cloud_env_vars.jaia_aws_virtualfleet_security_group }}"
        tags:
          jaia_instance_type: "virtualfleet"
          jaia_node_type: "{{ item.node_type }}"
          jaia_node_id: "{{ item.node_id }}"
          jaia_fleet: "{{ cloud_env_vars.jaia_fleet_index }}"
          jaia_customer: "{{ jaia_customer_no_quotes }}"
          jaiabot-rootfs-gen_repository: "{{ cloud_env_vars.jaia_aws_virtualfleet_repository }}"
          jaiabot-rootfs-gen_repository_version: "{{ cloud_env_vars.jaia_aws_virtualfleet_repository_version }}"          
        user_data: "{{ lookup('template', 'templates/cloud_vfleet_user_data.sh.j2') }}"
        wait: true
        state: running
      loop: "{{ node_map }}"
      register: ec2_instances_results

    - name: Update peer blocks in WireGuard config
      blockinfile:
        path: /etc/wireguard/wg_virtualfleet.conf
        block: |
          {{ lookup('template', 'templates/wireguard_peer.j2') }}
        marker: "# {mark} PEER {{ item.item.node_type }} {{ item.item.node_id }}: AUTOGENERATED"
        create: no
      loop: "{{ ec2_instances_results.results }}"
      when: item.changed
      become: yes
      tags: test

    - name: Restart WireGuard
      become: yes
      ansible.builtin.systemd:
        name: wg-quick@wg_virtualfleet
        state: restarted
        daemon_reload: yes
