# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: jaiabot/messages/xbee_extensions.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from goby.acomms.protobuf import driver_base_pb2 as goby_dot_acomms_dot_protobuf_dot_driver__base__pb2
from goby.protobuf import option_extensions_pb2 as goby_dot_protobuf_dot_option__extensions__pb2
from dccl import option_extensions_pb2 as dccl_dot_option__extensions__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='jaiabot/messages/xbee_extensions.proto',
  package='xbee.protobuf',
  syntax='proto2',
  serialized_options=None,
  serialized_pb=_b('\n&jaiabot/messages/xbee_extensions.proto\x12\rxbee.protobuf\x1a&goby/acomms/protobuf/driver_base.proto\x1a%goby/protobuf/option_extensions.proto\x1a\x1c\x64\x63\x63l/option_extensions.proto\"\xd7\x02\n\x04Peer\x12W\n\x07node_id\x18\x01 \x01(\tBD\x8a?A\xa2\x06>DEPRECATED (use hub_id or bot_id): set peer modem id as stringH\x00\x12\x44\n\x06hub_id\x18\x03 \x01(\x05\x42\x32\x8a?/\xa2\x06,Hub ID number for this peer (if peer is hub)H\x00\x12\x44\n\x06\x62ot_id\x18\x04 \x01(\x05\x42\x32\x8a?/\xa2\x06,Bot ID number for this peer (if peer is bot)H\x00\x12\x64\n\rserial_number\x18\x02 \x02(\x04\x42M\x8a?J\xa2\x06GXBee serial number for this peer (determined by querying ATSH and ATSL)B\x04\n\x02id\"\xb0\x07\n\x06\x43onfig\x12s\n\nnetwork_id\x18\x01 \x01(\x04:\x01\x37\x42\\\x8a?Y\xa2\x06VNetwork ID for this fleet (must match other peers in fleet): sets Xbee ATID=network_id\x12p\n\x05peers\x18\x02 \x03(\x0b\x32\x13.xbee.protobuf.PeerBL\x8a?I\xa2\x06\x46Mapping of Xbee serial_number to hub/bot id for all peers in the fleet\x12W\n\ntest_comms\x18\x04 \x01(\x08:\x05\x66\x61lseB<\x8a?9\xa2\x06\x36If true, enables testing functionality and diagnostics\x12\x98\x01\n\x12xbee_info_location\x18\x05 \x01(\t:\x1d/etc/jaiabot/xbee_info.pb.cfgB]\x8a?Z\xa2\x06WLocation to write a file with serial number and node id to be used by jaiabot_metadata.\x12\x41\n\x06hub_id\x18\x06 \x01(\x05\x42\x31\x8a?.\xa2\x06+If this node is a hub, set its hub_id here.\x12\x63\n\x13use_xbee_encryption\x18\x07 \x01(\x08:\x05\x66\x61lseB?\x8a?<\xa2\x06\x39This is used to determine if we should enable encryption.\x12z\n\x18xbee_encryption_password\x18\x08 \x01(\t:\x00\x42V\x8a?S\xa2\x06PThis is used for the encryption password. Password is a 128 bit value (16 bytes)\x12\x9c\x01\n\x11hub_info_location\x18\t \x01(\t:\x1c/etc/jaiabot/hub_info.pb.cfgBc\x8a?`\xa2\x06]Location to write a file with last hub id received from to initialize to that hub on restart.:\x08\xa2?\x05\xf2\x01\x02si:J\n\x06\x63onfig\x12\".goby.acomms.protobuf.DriverConfig\x18\xdc\x0b \x01(\x0b\x32\x15.xbee.protobuf.Config')
  ,
  dependencies=[goby_dot_acomms_dot_protobuf_dot_driver__base__pb2.DESCRIPTOR,goby_dot_protobuf_dot_option__extensions__pb2.DESCRIPTOR,dccl_dot_option__extensions__pb2.DESCRIPTOR,])


CONFIG_FIELD_NUMBER = 1500
config = _descriptor.FieldDescriptor(
  name='config', full_name='xbee.protobuf.config', index=0,
  number=1500, type=11, cpp_type=10, label=1,
  has_default_value=False, default_value=None,
  message_type=None, enum_type=None, containing_type=None,
  is_extension=True, extension_scope=None,
  serialized_options=None, file=DESCRIPTOR)


_PEER = _descriptor.Descriptor(
  name='Peer',
  full_name='xbee.protobuf.Peer',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='node_id', full_name='xbee.protobuf.Peer.node_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\212?A\242\006>DEPRECATED (use hub_id or bot_id): set peer modem id as string'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='hub_id', full_name='xbee.protobuf.Peer.hub_id', index=1,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\212?/\242\006,Hub ID number for this peer (if peer is hub)'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='bot_id', full_name='xbee.protobuf.Peer.bot_id', index=2,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\212?/\242\006,Bot ID number for this peer (if peer is bot)'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='serial_number', full_name='xbee.protobuf.Peer.serial_number', index=3,
      number=2, type=4, cpp_type=4, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\212?J\242\006GXBee serial number for this peer (determined by querying ATSH and ATSL)'), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='id', full_name='xbee.protobuf.Peer.id',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=167,
  serialized_end=510,
)


_CONFIG = _descriptor.Descriptor(
  name='Config',
  full_name='xbee.protobuf.Config',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='network_id', full_name='xbee.protobuf.Config.network_id', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=True, default_value=7,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\212?Y\242\006VNetwork ID for this fleet (must match other peers in fleet): sets Xbee ATID=network_id'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='peers', full_name='xbee.protobuf.Config.peers', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\212?I\242\006FMapping of Xbee serial_number to hub/bot id for all peers in the fleet'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='test_comms', full_name='xbee.protobuf.Config.test_comms', index=2,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\212?9\242\0066If true, enables testing functionality and diagnostics'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='xbee_info_location', full_name='xbee.protobuf.Config.xbee_info_location', index=3,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=_b("/etc/jaiabot/xbee_info.pb.cfg").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\212?Z\242\006WLocation to write a file with serial number and node id to be used by jaiabot_metadata.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='hub_id', full_name='xbee.protobuf.Config.hub_id', index=4,
      number=6, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\212?.\242\006+If this node is a hub, set its hub_id here.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='use_xbee_encryption', full_name='xbee.protobuf.Config.use_xbee_encryption', index=5,
      number=7, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\212?<\242\0069This is used to determine if we should enable encryption.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='xbee_encryption_password', full_name='xbee.protobuf.Config.xbee_encryption_password', index=6,
      number=8, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\212?S\242\006PThis is used for the encryption password. Password is a 128 bit value (16 bytes)'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='hub_info_location', full_name='xbee.protobuf.Config.hub_info_location', index=7,
      number=9, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=_b("/etc/jaiabot/hub_info.pb.cfg").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\212?`\242\006]Location to write a file with last hub id received from to initialize to that hub on restart.'), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=_b('\242?\005\362\001\002si'),
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=513,
  serialized_end=1457,
)

_PEER.oneofs_by_name['id'].fields.append(
  _PEER.fields_by_name['node_id'])
_PEER.fields_by_name['node_id'].containing_oneof = _PEER.oneofs_by_name['id']
_PEER.oneofs_by_name['id'].fields.append(
  _PEER.fields_by_name['hub_id'])
_PEER.fields_by_name['hub_id'].containing_oneof = _PEER.oneofs_by_name['id']
_PEER.oneofs_by_name['id'].fields.append(
  _PEER.fields_by_name['bot_id'])
_PEER.fields_by_name['bot_id'].containing_oneof = _PEER.oneofs_by_name['id']
_CONFIG.fields_by_name['peers'].message_type = _PEER
DESCRIPTOR.message_types_by_name['Peer'] = _PEER
DESCRIPTOR.message_types_by_name['Config'] = _CONFIG
DESCRIPTOR.extensions_by_name['config'] = config
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Peer = _reflection.GeneratedProtocolMessageType('Peer', (_message.Message,), dict(
  DESCRIPTOR = _PEER,
  __module__ = 'jaiabot.messages.xbee_extensions_pb2'
  # @@protoc_insertion_point(class_scope:xbee.protobuf.Peer)
  ))
_sym_db.RegisterMessage(Peer)

Config = _reflection.GeneratedProtocolMessageType('Config', (_message.Message,), dict(
  DESCRIPTOR = _CONFIG,
  __module__ = 'jaiabot.messages.xbee_extensions_pb2'
  # @@protoc_insertion_point(class_scope:xbee.protobuf.Config)
  ))
_sym_db.RegisterMessage(Config)

config.message_type = _CONFIG
goby_dot_acomms_dot_protobuf_dot_driver__base__pb2.DriverConfig.RegisterExtension(config)

_PEER.fields_by_name['node_id']._options = None
_PEER.fields_by_name['hub_id']._options = None
_PEER.fields_by_name['bot_id']._options = None
_PEER.fields_by_name['serial_number']._options = None
_CONFIG.fields_by_name['network_id']._options = None
_CONFIG.fields_by_name['peers']._options = None
_CONFIG.fields_by_name['test_comms']._options = None
_CONFIG.fields_by_name['xbee_info_location']._options = None
_CONFIG.fields_by_name['hub_id']._options = None
_CONFIG.fields_by_name['use_xbee_encryption']._options = None
_CONFIG.fields_by_name['xbee_encryption_password']._options = None
_CONFIG.fields_by_name['hub_info_location']._options = None
_CONFIG._options = None
# @@protoc_insertion_point(module_scope)
