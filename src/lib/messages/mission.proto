syntax = "proto2";

import "jaiabot/messages/geographic_coordinate.proto";
import "dccl/option_extensions.proto";

package jaiabot.protobuf;

enum MissionState
{
    PRE_DEPLOYMENT__OFF = 1;
    PRE_DEPLOYMENT__SELF_TEST = 2;
    PRE_DEPLOYMENT__FAILED = 3;
    PRE_DEPLOYMENT__WAIT_FOR_MISSION_PLAN = 4;
    PRE_DEPLOYMENT__READY = 5;

    IN_MISSION__UNDERWAY__REPLAN = 100;

    IN_MISSION__UNDERWAY__MOVEMENT__TRANSIT = 110;
    IN_MISSION__UNDERWAY__MOVEMENT__REMOTE_CONTROL__SETPOINT = 111;
    IN_MISSION__UNDERWAY__MOVEMENT__REMOTE_CONTROL__STATION_KEEP = 112;

    IN_MISSION__UNDERWAY__TASK__STATION_KEEP = 120;
    IN_MISSION__UNDERWAY__TASK__SURFACE_DRIFT = 121;
    IN_MISSION__UNDERWAY__TASK__DIVE__POWERED_DESCENT = 122;
    IN_MISSION__UNDERWAY__TASK__DIVE__HOLD = 123;
    IN_MISSION__UNDERWAY__TASK__DIVE__UNPOWERED_ASCENT = 124;
    IN_MISSION__UNDERWAY__TASK__DIVE__POWERED_ASCENT = 125;

    IN_MISSION__UNDERWAY__RECOVERY__TRANSIT = 130;
    IN_MISSION__UNDERWAY__RECOVERY__STATION_KEEP = 131;
    IN_MISSION__UNDERWAY__RECOVERY__STOPPED = 132;

    IN_MISSION__UNDERWAY__ABORT = 140;

    POST_DEPLOYMENT__RECOVERED = 200;
    POST_DEPLOYMENT__DATA_PROCESSING = 201;
    POST_DEPLOYMENT__DATA_OFFLOAD = 202;
    POST_DEPLOYMENT__IDLE = 203;
    POST_DEPLOYMENT__SHUTTING_DOWN = 204;
}

message MissionReport
{
    option (dccl.msg) = {
        unit_system: "si"
    };

    required MissionState state = 10;
}

message MissionTask
{
    option (dccl.msg) = {
        unit_system: "si"
    };

    enum TaskType
    {
        DIVE = 1;
        STATION_KEEP = 2;
        SURFACE_DRIFT = 3;
    }
    required TaskType type = 1;

    message DiveParameters
    {
        optional double max_depth = 1 [
            default = inf,
            (dccl.field) = {
                min: 0
                max: 100
                precision: 0
                units { base_dimensions: "L" }
            }
        ];
        optional double depth_interval = 2 [
            default = inf,
            (dccl.field) = {
                min: 0
                max: 50
                precision: 1
                units { base_dimensions: "L" }
            }
        ];
        optional double hold_time = 3 [
            default = 0,
            (dccl.field) = {
                min: 0
                max: 3600
                precision: 0
                units { base_dimensions: "T" }
            }
        ];
    }

    // for type == DIVE
    optional DiveParameters dive = 2;

    message DriftParameters
    {
        optional int32 drift_time = 3 [
            default = 0,
            (dccl.field) = {
                min: 0
                max: 3600
                precision: -1
                units { base_dimensions: "T" }
            }
        ];
    }

    // for type == SURFACE_DRIFT
    optional DriftParameters surface_drift = 3;
}

message MissionPlan
{
    option (dccl.msg) = {
        unit_system: "si"
    };

    enum MissionStart
    {
        START_IMMEDIATELY = 1;
        START_ON_COMMAND = 2;
        // START_IN_WATER_DETECT = 3;
        // START_AFTER_DELAY = 4;
    }
    optional MissionStart start = 1 [default = START_ON_COMMAND];

    enum MovementType
    {
        TRANSIT = 1;
        REMOTE_CONTROL = 2;
    }
    optional MovementType movement = 2 [default = TRANSIT];

    message Goal
    {
        optional string name = 1 [(dccl.field).omit = true];
        required GeographicCoordinate location = 2;
        optional MissionTask task = 3;
    }
    repeated Goal goal = 3 [(dccl.field).max_repeat = 14];

    message Recovery
    {
        optional bool recover_at_final_goal = 1 [default = true];
        optional GeographicCoordinate location = 2;
    }
    required Recovery recovery = 4;
}

message IvPBehaviorUpdate
{
    message TransitUpdate
    {
        // unit dimensions must match those used by MOOS-IvP
        option (dccl.msg) = {
            unit_system: "si"
        };
        required bool active = 1;

        optional double x = 2
            [(dccl.field).units = { base_dimensions: "L" }];  // meters
        optional double y = 3
            [(dccl.field).units = { base_dimensions: "L" }];  // meters
        optional double speed = 4 [
            (dccl.field).units = { base_dimensions: "LT^-1" }
        ];  // meters/second
    }

    message StationkeepUpdate
    {
        // unit dimensions must match those used by MOOS-IvP
        option (dccl.msg) = {
            unit_system: "si"
        };

        required bool active = 1;

        optional double x = 2
            [(dccl.field).units = { base_dimensions: "L" }];  // meters
        optional double y = 3
            [(dccl.field).units = { base_dimensions: "L" }];  // meters
        optional double outer_speed = 4 [
            (dccl.field).units = { base_dimensions: "LT^-1" }
        ];  // meters/second
        optional double transit_speed = 5 [
            (dccl.field).units = { base_dimensions: "LT^-1" }
        ];  // meters/second
        optional bool center_activate = 6 [default = false];
    }

    oneof behavior
    {
        TransitUpdate transit = 1;
        StationkeepUpdate stationkeep = 2;
    }
}

message IvPBehaviorReport
{
    message TransitReport
    {
        optional bool waypoint_reached = 1 [default = false];
    }

    oneof behavior
    {
        TransitReport transit = 1;
    }
}
