syntax = "proto2";

import "dccl/option_extensions.proto";
import "jaiabot/messages/mission.proto";
import "jaiabot/messages/geographic_coordinate.proto";
import "jaiabot/messages/high_control.proto";
import "goby/middleware/protobuf/coroner.proto";


package jaiabot.protobuf;

message Command
{
    option (dccl.msg) = {
        id: 80
        max_bytes: 200
        codec_version: 3
        unit_system: "si"
    };

    required uint32 bot_id = 1 [(dccl.field) = { min: 0 max: 255 }];
    required uint64 time = 2 [(dccl.field) = {
        codec: "dccl.time2"
        units { prefix: "micro" derived_dimensions: "time" }
    }];

    enum CommandType
    {
        // pre mission
        MISSION_PLAN = 1;
        START_MISSION = 2;

        // during any mission
        NEXT_TASK = 10;
        RETURN_TO_HOME = 11;
        STOP = 12;

        // during remote control mission
        REMOTE_CONTROL_SETPOINT = 20;
        REMOTE_CONTROL_TASK = 21;
        REMOTE_CONTROL_RESUME_MOVEMENT = 22;

        // post mission
        REDEPLOY = 30;
        SHUTDOWN = 31;
    }

    required CommandType type = 10;

    // required for type == MISSION_PLAN
    optional MissionPlan plan = 20;

    // required for type == REMOTE_CONTROL_SETPOINT
    optional RemoteControl rc = 30;

    // required for type == REMOTE_CONTROL_TASK
    optional MissionTask rc_task = 31;
}

message BotStatus
{
    option (dccl.msg) = {
        id: 81
        max_bytes: 64
        codec_version: 3
        unit_system: "si"
    };

    required uint32 bot_id = 1 [(dccl.field) = { min: 0 max: 255 }];
    required uint64 time = 2 [(dccl.field) = {
        codec: "dccl.time2"
        units { prefix: "micro" derived_dimensions: "time" }
    }];
    optional uint64 last_command_time = 3 [(dccl.field) = {
        codec: "dccl.time2"
        units { prefix: "micro" derived_dimensions: "time" }
    }];

    optional goby.middleware.protobuf.HealthState health_state = 4;

    optional GeographicCoordinate location = 10;

    optional double depth = 11 [(dccl.field) = {
        min: 0
        max: 100
        precision: 1
        units: { derived_dimensions: "length" }
    }];

    message Attitude
    {
        optional double roll = 1 [(dccl.field) = {
            min: -180
            max: 180
            precision: 0
            units { derived_dimensions: "plane_angle" system: "angle::degree" }
        }];
        optional double pitch = 2 [(dccl.field) = {
            min: -180
            max: 180
            precision: 0
            units { derived_dimensions: "plane_angle" system: "angle::degree" }
        }];
        optional double heading = 3 [(dccl.field) = {
            min: 0
            max: 360
            precision: 0
            units { derived_dimensions: "plane_angle" system: "angle::degree" }
        }];
        optional double course_over_ground = 4 [(dccl.field) = {
            min: 0
            max: 360
            precision: 0
            units { derived_dimensions: "plane_angle" system: "angle::degree" }
        }];
    }
    optional Attitude attitude = 20;

    message Speed
    {
        optional double over_ground = 1 [(dccl.field) = {
            min: -5
            max: 10
            precision: 1
            units { derived_dimensions: "velocity" }
        }];
        optional double over_water = 2 [(dccl.field) = {
            min: -5
            max: 10
            precision: 1
            units { derived_dimensions: "velocity" }
        }];
    }
    optional Speed speed = 30;

    optional MissionState mission_state = 40;

    // bounds should match MissionPlan.goal max_repeat value
    optional int32 active_goal = 41 [(dccl.field) = { min: 0 max: 13 }]; 

    optional double salinity = 51
        [(dccl.field) = { min: 0 max: 100 precision: 1 }];

    optional double temperature = 52 [(dccl.field) = {
        min: -50
        max: 100
        precision: 2
        units { derived_dimensions: "temperature" system: "celsius" }
    }];

    optional double thermocouple_temperature = 53 [(dccl.field) = {
        min: -50
        max: 100
        precision: 2
        units { derived_dimensions: "temperature" system: "celsius" }
    }];
    
    optional double vv_current = 54 [(dccl.field) = {
        min: 0
        max: 5
        precision: 2
        units { derived_dimensions: "current"}
    }];

    optional double vcc_current = 55 [(dccl.field) = {
        min: 0 
        max: 5
        precision: 2
        units { derived_dimensions: "current"}
    }];

    optional double vcc_voltage = 56 [(dccl.field) = {
        min: 0
        max: 25
        precision: 2
        units { derived_dimensions: "electric_potential" system: "si" }
    }];
}

message DivePacket
{
    option (dccl.msg) = {
        id: 0x5001
        max_bytes: 200
        codec_version: 3
        unit_system: "si"
    };

    required uint32 bot_id = 1 [(dccl.field) = { min: 0 max: 255 }];
    required uint64 start_time = 2 [(dccl.field) = {
        codec: "dccl.time2"
        units { prefix: "micro" derived_dimensions: "time" }
    }];
    required uint64 end_time = 3 [(dccl.field) = {
        codec: "dccl.time2"
        units { prefix: "micro" derived_dimensions: "time" }
    }];

    required double dive_rate = 10 [(dccl.field) = {
        min: 0
        max: 10
        precision: 1
        units { derived_dimensions: "velocity" }
    }];

    optional double unpowered_rise_rate = 11 [(dccl.field) = {
        min: 0
        max: 10
        precision: 1
        units { derived_dimensions: "velocity" }
    }];

    optional double powered_rise_rate = 12 [(dccl.field) = {
        min: 0
        max: 10
        precision: 1
        units { derived_dimensions: "velocity" }
    }];

    required double depth_achieved = 13 [(dccl.field) = {
        min: 0
        max: 100
        precision: 1
        units: { derived_dimensions: "length" }
    }];

    message Measurements
    {
        optional double mean_depth = 1 [(dccl.field) = {
            min: 0
            max: 100
            precision: 1
            units: { derived_dimensions: "length" }
        }];

        optional double mean_temperature = 2 [(dccl.field) = {
            min: -1
            max: 50
            precision: 1
            units { derived_dimensions: "temperature" system: "celsius" }
        }];

        optional double mean_salinity = 3
            [(dccl.field) = { min: 0 max: 45 precision: 1 }];
    }

    repeated Measurements measurement = 14 [(dccl.field) = { max_repeat: 50 }];
}
