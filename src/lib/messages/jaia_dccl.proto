syntax = "proto2";

import "dccl/option_extensions.proto";
import "jaiabot/messages/mission.proto";
import "jaiabot/messages/geographic_coordinate.proto";
import "jaiabot/messages/high_control.proto";
import "goby/middleware/protobuf/coroner.proto";
import "jaiabot/messages/health.proto";
import "jaiabot/messages/imu.proto";

package jaiabot.protobuf;

message Command
{
    /*
    Actual maximum size of message: 179 bytes / 1432 bits
        dccl.id head...........................8
        user head..............................0
        body................................1422
        padding to full byte...................2
    Allowed maximum size of message: 250 bytes / 2000 bits
    */
    option (dccl.msg) = {
        id: 80
        max_bytes: 250
        codec_version: 4
        unit_system: "si"
    };

    required uint32 bot_id = 1 [(dccl.field) = { min: 0 max: 255 }];
    required uint64 time = 2 [(dccl.field) = {
        codec: "dccl.time2"
        units { prefix: "micro" derived_dimensions: "time" }
    }];

    enum CommandType
    {
        // pre mission
        MISSION_PLAN = 1;
        ACTIVATE = 2;
        START_MISSION = 3;
        MISSION_PLAN_FRAGMENT = 4;

        // during any mission
        NEXT_TASK = 10;
        RETURN_TO_HOME = 11;
        STOP = 12;

        // during remote control mission
        REMOTE_CONTROL_SETPOINT = 20;
        REMOTE_CONTROL_TASK = 21;
        REMOTE_CONTROL_RESUME_MOVEMENT = 22;

        // post mission
        RECOVERED = 30;
        SHUTDOWN = 31;
        RETRY_DATA_OFFLOAD = 32;

        // debugging low level commands
        RESTART_ALL_SERVICES = 40;
        REBOOT_COMPUTER = 41;
        SHUTDOWN_COMPUTER = 42;
    }

    required CommandType type = 10;

    oneof command_data
    {
        // required for type == MISSION_PLAN
        MissionPlan plan = 20;

        // required for type == REMOTE_CONTROL_SETPOINT
        RemoteControl rc = 30;

        // required for type == REMOTE_CONTROL_TASK
        MissionTask rc_task = 31;
    }
}

message CommandForHub
{
    option (dccl.msg) = {
        id: 90
        max_bytes: 250
        codec_version: 4
        unit_system: "si"
    };

    required uint32 hub_id = 1 [(dccl.field) = { min: 0 max: 255 }];
    required uint64 time = 2 [(dccl.field) = {
        codec: "dccl.time2"
        units { prefix: "micro" derived_dimensions: "time" }
    }];

    enum HubCommandType
    {
        SCAN_FOR_BOTS = 5;

        // debugging low level commands
        RESTART_ALL_SERVICES = 40;
        REBOOT_COMPUTER = 41;
        SHUTDOWN_COMPUTER = 42;
    }

    required HubCommandType type = 10;
    optional uint32 scan_for_bot_id = 11;
}

message BotStatus
{
    /*
    Actual maximum size of message: 53 bytes / 424 bits
            dccl.id head...........................8
            user head..............................0
            body.................................415
            padding to full byte...................1
    Allowed maximum size of message: 250 bytes / 2000 bits
    */
    option (dccl.msg) = {
        id: 81
        max_bytes: 250
        codec_version: 4
        unit_system: "si"
    };

    required uint32 bot_id = 1 [(dccl.field) = { min: 0 max: 255 }];
    required uint64 time = 2 [(dccl.field) = {
        codec: "dccl.time2"
        units { prefix: "micro" derived_dimensions: "time" }
    }];
    optional uint64 last_command_time = 3 [(dccl.field) = {
        codec: "dccl.time2"
        units { prefix: "micro" derived_dimensions: "time" }
    }];

    optional goby.middleware.protobuf.HealthState health_state = 4;
    repeated Error error = 5 [(dccl.field).max_repeat = 5];
    repeated Warning warning = 6 [(dccl.field).max_repeat = 5];

    optional GeographicCoordinate location = 10;

    optional double depth = 11 [(dccl.field) = {
        min: -1
        max: 100
        precision: 1
        units: { derived_dimensions: "length" }
    }];

    message Attitude
    {
        optional double roll = 1 [(dccl.field) = {
            min: -180
            max: 180
            precision: 0
            units { derived_dimensions: "plane_angle" system: "angle::degree" }
        }];
        optional double pitch = 2 [(dccl.field) = {
            min: -180
            max: 180
            precision: 0
            units { derived_dimensions: "plane_angle" system: "angle::degree" }
        }];
        optional double heading = 3 [(dccl.field) = {
            min: 0
            max: 360
            precision: 0
            units { derived_dimensions: "plane_angle" system: "angle::degree" }
        }];
        optional double course_over_ground = 4 [(dccl.field) = {
            min: 0
            max: 360
            precision: 0
            units { derived_dimensions: "plane_angle" system: "angle::degree" }
        }];
    }
    optional Attitude attitude = 20;

    message Speed
    {
        optional double over_ground = 1 [(dccl.field) = {
            min: -5
            max: 10
            precision: 1
            units { derived_dimensions: "velocity" }
        }];
        optional double over_water = 2 [(dccl.field) = {
            min: -5
            max: 10
            precision: 1
            units { derived_dimensions: "velocity" }
        }];
    }
    optional Speed speed = 30;

    optional MissionState mission_state = 40;

    // bounds should match MissionPlan.goal max_repeat value *
    // expected_fragments max
    optional int32 active_goal = 41 [(dccl.field) = { min: 0 max: 29 }];
    optional double distance_to_active_goal = 42 [(dccl.field) = {
        min: 0
        max: 1000
        precision: 1
        units: { derived_dimensions: "length" }
    }];
    optional uint32 active_goal_timeout = 43 [(dccl.field) = {
        min: 0
        max: 3600
        precision: 0
        units { base_dimensions: "T" }
    }];
    optional int32 repeat_index = 44
        [(dccl.field) = { min: 0 max: 1000 precision: 0 }];

    optional double salinity = 51
        [(dccl.field) = { min: 0 max: 100 precision: 1 }];

    optional double temperature = 52 [(dccl.field) = {
        min: -50
        max: 100
        precision: 2
        units { derived_dimensions: "temperature" system: "celsius" }
    }];

    optional double thermocouple_temperature = 53 [(dccl.field) = {
        min: -50
        max: 100
        precision: 2
        units { derived_dimensions: "temperature" system: "celsius" }
    }];

    optional double vv_current = 54 [(dccl.field) = {
        min: -5
        max: 1000
        precision: 2
        units { derived_dimensions: "current" }
    }];

    optional double vcc_current = 55 [(dccl.field) = {
        min: -5
        max: 1000
        precision: 2
        units { derived_dimensions: "current" }
    }];

    optional double vcc_voltage = 56 [(dccl.field) = {
        min: 0
        max: 25
        precision: 2
        units { derived_dimensions: "electric_potential" system: "si" }
    }];

    optional double battery_percent = 57
        [(dccl.field) = { min: 0 max: 100 precision: 0 }];

    optional int32 calibration_status = 58 [(dccl.field) = { min: 0 max: 3 }];

    optional double hdop = 59 [(dccl.field) = { min: 0 max: 100 precision: 2 }];

    optional double pdop = 60 [(dccl.field) = { min: 0 max: 100 precision: 2 }];

    optional int32 data_offload_percentage = 61
        [(dccl.field) = { min: 0 max: 100 precision: 0 }];

    optional int32 wifi_link_quality_percentage = 62
        [(dccl.field) = { min: 0 max: 100 precision: 0 }];
}

message DriftPacket
{
    option (dccl.msg) = {
        unit_system: "si"
    };

    optional int32 drift_duration = 1 [
        default = 0,
        (dccl.field) = {
            min: 0
            max: 3600
            precision: -1
            units { base_dimensions: "T" }
        }
    ];

    message EstimatedDrift
    {
        required double speed = 1 [(dccl.field) = {
            min: 0
            max: 10
            precision: 1
            units { derived_dimensions: "velocity" }
        }];

        optional double heading = 3 [(dccl.field) = {
            min: 0
            max: 360
            precision: 0
            units { derived_dimensions: "plane_angle" system: "angle::degree" }
        }];
    }

    // should correspond to ocean current velocity
    optional EstimatedDrift estimated_drift = 10;

    // location C
    optional GeographicCoordinate start_location = 11;
    // location D
    optional GeographicCoordinate end_location = 12;

    // Significant wave height is defined as the average wave height,
    // from trough to crest, of the highest one-third of the waves
    optional double significant_wave_height = 13 [(dccl.field) = {
        min: 0
        max: 50
        precision: 3
        units: { derived_dimensions: "length" }
    }];
}

message DivePacket
{
    option (dccl.msg) = {
        unit_system: "si"
    };

    required double dive_rate = 10 [(dccl.field) = {
        min: 0
        max: 10
        precision: 1
        units { derived_dimensions: "velocity" }
    }];

    optional double unpowered_rise_rate = 11 [(dccl.field) = {
        min: 0
        max: 10
        precision: 1
        units { derived_dimensions: "velocity" }
    }];

    optional double powered_rise_rate = 12 [(dccl.field) = {
        min: 0
        max: 10
        precision: 1
        units { derived_dimensions: "velocity" }
    }];

    required double depth_achieved = 13 [(dccl.field) = {
        min: 0
        max: 100
        precision: 1
        units: { derived_dimensions: "length" }
    }];

    message Measurements
    {
        optional double mean_depth = 1 [(dccl.field) = {
            min: 0
            max: 100
            precision: 1
            units: { derived_dimensions: "length" }
        }];

        optional double mean_temperature = 2 [(dccl.field) = {
            min: -1
            max: 50
            precision: 1
            units { derived_dimensions: "temperature" system: "celsius" }
        }];

        optional double mean_salinity = 3
            [(dccl.field) = { min: 0 max: 45 precision: 1 }];
    }

    repeated Measurements measurement = 14 [(dccl.field) = { max_repeat: 50 }];

    // location A
    optional GeographicCoordinate start_location = 15;

    optional double duration_to_acquire_gps = 16 [(dccl.field) = {
        min: 0
        max: 120
        precision: 1
        units { base_dimensions: "T" }
    }];

    // Did we reach seafloor?
    optional bool bottom_dive = 17 [default = false];

    // Did we reach min depth?
    optional bool reached_min_depth = 18 [default = false];

    // If we reached bottom, what was the bottom type
    enum BottomType
    {
        HARD = 1;
        SOFT = 2;
    }

    optional BottomType bottom_type = 19;

    // For bottom characterization
    optional double max_acceleration = 20 [(dccl.field) = {
        min: 0
        max: 100
        precision: 1
        units { derived_dimensions: "acceleration" }
    }];
}

message TaskPacket
{
    /*
     Actual maximum size of message: 218 bytes / 1744 bits
        dccl.id head..........................16
        user head..............................0
        body................................1728
        padding to full byte...................0
     Allowed maximum size of message: 250 bytes / 2000 bits
    */
    option (dccl.msg) = {
        id: 0x5001
        max_bytes: 250
        codec_version: 4
        unit_system: "si"
    };

    required uint32 bot_id = 1 [(dccl.field) = { min: 0 max: 255 }];
    required uint64 start_time = 2 [(dccl.field) = {
        codec: "dccl.time2"
        units { prefix: "micro" derived_dimensions: "time" }
    }];
    required uint64 end_time = 3 [(dccl.field) = {
        codec: "dccl.time2"
        units { prefix: "micro" derived_dimensions: "time" }
    }];
    required MissionTask.TaskType type = 4;

    optional DivePacket dive = 10;
    optional DriftPacket drift = 11;
}

message ContactUpdate
{
    option (dccl.msg) = {
        id: 0x5002
        max_bytes: 16
        codec_version: 4
        unit_system: "si"
    };

    optional int32 contact = 1 [(dccl.field) = { min: 1, max: 15 }];
    required GeographicCoordinate location = 2;
    optional double speed_over_ground = 3 [(dccl.field) = {
        min: -5
        max: 10
        precision: 1
        units { derived_dimensions: "velocity" }
    }];
    optional double heading_or_cog = 5 [(dccl.field) = {
        min: 0
        max: 360
        precision: 0
        units { derived_dimensions: "plane_angle" system: "angle::degree" }
    }];
}
