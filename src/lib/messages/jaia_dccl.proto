syntax = "proto2";

import "dccl/option_extensions.proto";
import "jaiabot/messages/mission.proto";
import "jaiabot/messages/geographic_coordinate.proto";

package jaiabot.protobuf;

message Command
{
    option (dccl.msg) = {
        id: 80
        max_bytes: 250
        codec_version: 3
        unit_system: "si"
    };

    required uint32 bot_id = 1 [(dccl.field) = { min: 0 max: 255 }];
    required uint64 time = 2 [(dccl.field) = {
        codec: "dccl.time2"
        units { prefix: "micro" derived_dimensions: "time" }
    }];

    enum CommandType
    {
        MISSION_PLAN = 1;
        START_MISSION = 2;
        NEXT_TASK = 3;
        RETURN_TO_HOME = 4;
        STOP = 5;
        REDEPLOY = 6;
        SHUTDOWN = 7;
    }

    required CommandType type = 10;

    // required for type == MISSION_PLAN
    optional MissionPlan plan = 20;
}

message BotStatus
{
    option (dccl.msg) = {
        id: 81
        max_bytes: 64
        codec_version: 3
        unit_system: "si"
    };

    required uint32 bot_id = 1 [(dccl.field) = { min: 0 max: 255 }];
    required uint64 time = 2 [(dccl.field) = {
        codec: "dccl.time2"
        units { prefix: "micro" derived_dimensions: "time" }
    }];

    optional GeographicCoordinate location = 10;

    optional double depth = 11 [(dccl.field) = {
        min: 0
        max: 100
        precision: 1
        units: { derived_dimensions: "length" }
    }];

    message Attitude
    {
        optional double roll = 1 [(dccl.field) = {
            min: -180
            max: 180
            precision: 0
            units { derived_dimensions: "plane_angle" system: "angle::degree" }
        }];
        optional double pitch = 2 [(dccl.field) = {
            min: -180
            max: 180
            precision: 0
            units { derived_dimensions: "plane_angle" system: "angle::degree" }
        }];
        optional double heading = 3 [(dccl.field) = {
            min: 0
            max: 360
            precision: 0
            units { derived_dimensions: "plane_angle" system: "angle::degree" }
        }];
        optional double course_over_ground = 4 [(dccl.field) = {
            min: 0
            max: 360
            precision: 0
            units { derived_dimensions: "plane_angle" system: "angle::degree" }
        }];
    }
    optional Attitude attitude = 20;

    message Speed
    {
        optional double over_ground = 1 [(dccl.field) = {
            min: -5
            max: 10
            precision: 1
            units { derived_dimensions: "velocity" }
        }];
        optional double over_water = 2 [(dccl.field) = {
            min: -5
            max: 10
            precision: 1
            units { derived_dimensions: "velocity" }
        }];
    }
    optional Speed speed = 30;

    optional MissionState mission_state = 40;
}
