syntax = "proto2";

import "dccl/option_extensions.proto";

package jaiabot.protobuf;

message IMUCommand
{
    enum IMUCommandType
    {
        TAKE_READING = 0;
        START_WAVE_HEIGHT_SAMPLING = 1;
        STOP_WAVE_HEIGHT_SAMPLING = 2;
    }

    required IMUCommandType type = 1;
}

message IMUData
{
    message EulerAngles {
        optional double heading = 1 
            [(dccl.field) = {units {
                derived_dimensions: "plane_angle"
                system: "angle::degree"
                }}
            ];
            
        optional double pitch = 2
            [(dccl.field) = {units {
                derived_dimensions: "plane_angle"
                system: "angle::degree"
                }}
            ];

        optional double roll = 3
            [(dccl.field) = {units {
                derived_dimensions: "plane_angle"
                system: "angle::degree"
                }}
            ];

    }
    optional EulerAngles euler_angles = 1;

    message Acceleration {
        optional double x = 1;
        optional double y = 2;
        optional double z = 3;
    }

    optional Acceleration linear_acceleration = 2;
    optional Acceleration gravity = 3;

    message CalibrationStatus {
        optional int32 sys = 1 [(dccl.field) = { min: 0 max: 3 }];
        optional int32 gyro = 2 [(dccl.field) = { min: 0 max: 3 }];
        optional int32 accel = 3 [(dccl.field) = { min: 0 max: 3 }];
        optional int32 mag = 4 [(dccl.field) = { min: 0 max: 3 }];
    }

    optional CalibrationStatus calibration_status = 4;

    optional bool bot_rolled_over = 5 [default = false];

    optional double significant_wave_height = 6 [(dccl.field) = {units {
            derived_dimensions: "length"
            system: "si"
            }}
        ];

    // For bottom characterization
    optional double max_acceleration = 7
        [(dccl.field) = {units {
            derived_dimensions: "acceleration"
            system: "si"
            }}
        ];

}

message IMUIssue
{
    enum SolutionType
    {
        STOP_BOT = 0;
        USE_COG = 1;
        USE_CORRECTION = 2;
        RESTART_BOT = 3;
        REBOOT_BOT = 4;
        REPORT_IMU = 5;
        RESTART_IMU_PY = 6;
    }

    required SolutionType solution = 1;
}
