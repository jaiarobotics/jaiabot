syntax = "proto2";

import "goby/middleware/protobuf/app_config.proto";
import "goby/zeromq/protobuf/interprocess_config.proto";
import "goby/middleware/protobuf/serial_config.proto";
import "goby/middleware/protobuf/transporter_config.proto";
import "dccl/option_extensions.proto";

package jaiabot.config;

message MissionManager
{
    option (dccl.msg) = {
        unit_system: "si"
    };
    optional goby.middleware.protobuf.AppConfig app = 1;
    optional goby.zeromq.protobuf.InterProcessPortalConfig interprocess = 2;

    required int32 bot_id = 10;
    required goby.middleware.protobuf.TransporterConfig command_sub_cfg = 11;

    // timeout to allow all applications to report HEALTH__OK
    optional double startup_timeout = 12
        [default = 120, (dccl.field).units = { base_dimensions: "T" }];
    
    // acceptable eps when dive depth is considered reached (in meters)
    optional double dive_depth_eps = 30
        [default = 0.1, (dccl.field).units = { base_dimensions: "L" }];

    // bottoming timeout in seconds without depth change greater than
    // dive_depth_eps before assuming the bottom has been hit
    optional double bottoming_timeout = 31
        [default = 5, (dccl.field).units = { base_dimensions: "T" }];

    // surfacing timeout in seconds before switching to powered ascent
    optional double surfacing_timeout = 32
        [default = 600, (dccl.field).units = { base_dimensions: "T" }];

    // acceptable eps when dive surface is considered reached (in meters)
    optional double dive_surface_eps = 33
        [default = 0.75, (dccl.field).units = { base_dimensions: "L" }];

    enum RemoteControlSetpointEnd
    {
        RC_SETPOINT_ENDS_IN_STATIONKEEP = 1;
        RC_SETPOINT_ENDS_IN_SURFACE_DRIFT = 2;
    }
    optional RemoteControlSetpointEnd rc_setpoint_end = 50
        [default = RC_SETPOINT_ENDS_IN_STATIONKEEP];

    // e.g. rsync -aP --exclude='*.txt' /var/log/jaiabot/bot/*/
    // jaia@hub0:/var/log/jaiabot/bot_offload
    required string data_offload_command = 60;

    optional bool stop_logging_while_idle = 70 [default = true];
}

message DiveDebug
{
    option (dccl.msg) = {
        unit_system: "si"
    };

    optional double current_depth = 1 [
            default = 0,
            (dccl.field) = {
                precision: 0
                units { base_dimensions: "L" }
            }
        ];

    optional double last_depth = 2 [
            default = 0,
            (dccl.field) = {
                precision: 0
                units { base_dimensions: "L" }
            }
        ];

    optional double goal_depth = 3 [
            default = 0,
            (dccl.field) = {
                precision: 0
                units { base_dimensions: "L" }
            }
        ];

    optional double depth_eps = 4 [
            default = 0, 
            (dccl.field).units = 
                { base_dimensions: "L" }
        ];

    optional uint64 current_time = 5 [
            (dccl.field) = {
                codec: "dccl.time2"
                units { prefix: "micro" derived_dimensions: "time" }
        }];

    optional uint64 last_depth_change_time = 6 [
            (dccl.field) = {
                codec: "dccl.time2"
                units { prefix: "micro" derived_dimensions: "time" }
        }];

    optional double bottoming_timeout = 7 [
            default = 0, 
            (dccl.field).units = { base_dimensions: "T" }
        ];

    optional double hold_timeout = 8 [
            default = 0, 
            (dccl.field).units = { base_dimensions: "T" }
        ];

    optional double unpowered_ascent_timeout = 9 [
            default = 0, 
            (dccl.field).units = { base_dimensions: "T" }
        ];

    optional bool depth_reached = 10 [default = false];
    optional bool depth_changed = 11 [default = false];
    optional bool depth_change_timeout = 12 [default = false];
    optional bool dive_complete = 13 [default = false];
    optional bool unpowered_ascent_timed_out = 14 [default = false];
    optional bool surfaced = 15 [default = false];

    enum DIVE_MODE
    {
        NONE = 1;
        POWERED_DESCENT = 2;
        HOLD = 3;
        UNPOWERED_ASCENT = 4;
        POWERED_ASCENT = 5;
    }
    optional DIVE_MODE dive_mode = 16
        [default = NONE];
}
